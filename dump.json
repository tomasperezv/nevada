[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/clone-object.js",
    "memberof": null,
    "longname": "strip-types/src/clone-object.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\n'use strict';\n\n/**\n * Adapter object for storing data in cookies without depending on a specific implementation.\n * @module CloneObject\n * @see https://www.npmjs.com/package/js-cookiethis._storage(id);\n */\n\nclass CloneObject {\n  /**\n   * @method clone\n   * @returns {Object}\n   */\n  clone(sourceObject) {\n    return Object.assign({}, sourceObject);\n  }\n\n  /**\n   * @param {Object} sourceObject\n   * @param {Array} keys\n   * @method cloneWithout\n   * @returns {Object}\n   */\n  cloneWithout(sourceObject, keys) {\n    const resultObject = this.clone(sourceObject);\n    keys.forEach(currentKey => {\n      delete resultObject[currentKey];\n    });\n\n    return resultObject;\n  }\n}\n\nexport default new CloneObject();"
  },
  {
    "__docId__": 1,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CloneObject",
    "memberof": "strip-types/src/clone-object.js",
    "longname": "strip-types/src/clone-object.js~CloneObject",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/clone-object.js",
    "importStyle": null,
    "description": "Adapter object for storing data in cookies without depending on a specific implementation.",
    "see": [
      "https://www.npmjs.com/package/js-cookiethis._storage(id);"
    ],
    "lineNumber": 10,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "CloneObject"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clone",
    "memberof": "strip-types/src/clone-object.js~CloneObject",
    "longname": "strip-types/src/clone-object.js~CloneObject#clone",
    "access": null,
    "description": "",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "clone"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "name": "sourceObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 3,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cloneWithout",
    "memberof": "strip-types/src/clone-object.js~CloneObject",
    "longname": "strip-types/src/clone-object.js~CloneObject#cloneWithout",
    "access": null,
    "description": "",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "cloneWithout"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "sourceObject",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 4,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "cloneObject",
    "memberof": "strip-types/src/clone-object.js",
    "longname": "strip-types/src/clone-object.js~cloneObject",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/clone-object.js",
    "importStyle": "cloneObject",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "strip-types/src/clone-object.js~CloneObject"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/component/base/base-controller-view.js",
    "memberof": null,
    "longname": "strip-types/src/component/base/base-controller-view.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\n'use strict';\n\nimport EventActions from './event-actions';\nimport Environment from '../../environment';\n\n/**\n * The base class for views\n * @module BaseControllerView\n */\nclass BaseControllerView {\n\n  /**\n   * @constructor\n   */\n  constructor(options = {}) {\n    if (typeof this.locators === 'undefined') {\n      this.locators = options.locators || {};\n    }\n    this.locators.main = options.locator || null;\n    this._controller = options.controller || null;\n    this.$ = require('../../dom/core');\n\n    this._loadTemplate();\n    this._attachEvents();\n  }\n\n  /**\n   * Autoloads the template in the development environment.\n   *\n   * @method _loadTemplate\n   * @private\n   */\n  _loadTemplate() {\n    if (Environment.isDevelopment()) {\n      if (this._template !== null) {\n        this.$(this.locators.main).replaceWith(this._template);\n      }\n    }\n  }\n\n  /**\n   * @method _attachEvents\n   * @private\n   */\n  _attachEvents() {\n    const eventActions = new EventActions();\n    eventActions.augment(this);\n  }\n\n  /**\n   * @method render\n   * @public\n   */\n  render() {}\n\n  /**\n   * @method\n   * @param {String} state\n   */\n  _notifyParentOfStateChange(state) {\n    if (this._controller !== null) {\n      this._controller.onStateChange(state);\n    }\n  }\n}\n\nexport default BaseControllerView;"
  },
  {
    "__docId__": 6,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BaseControllerView",
    "memberof": "strip-types/src/component/base/base-controller-view.js",
    "longname": "strip-types/src/component/base/base-controller-view.js~BaseControllerView",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/component/base/base-controller-view.js",
    "importStyle": "BaseControllerView",
    "description": "The base class for views",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "BaseControllerView"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 7,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "strip-types/src/component/base/base-controller-view.js~BaseControllerView",
    "longname": "strip-types/src/component/base/base-controller-view.js~BaseControllerView#constructor",
    "access": null,
    "description": "",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 8,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "locators",
    "memberof": "strip-types/src/component/base/base-controller-view.js~BaseControllerView",
    "longname": "strip-types/src/component/base/base-controller-view.js~BaseControllerView#locators",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 9,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_controller",
    "memberof": "strip-types/src/component/base/base-controller-view.js~BaseControllerView",
    "longname": "strip-types/src/component/base/base-controller-view.js~BaseControllerView#_controller",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 10,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "$",
    "memberof": "strip-types/src/component/base/base-controller-view.js~BaseControllerView",
    "longname": "strip-types/src/component/base/base-controller-view.js~BaseControllerView#$",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 11,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_loadTemplate",
    "memberof": "strip-types/src/component/base/base-controller-view.js~BaseControllerView",
    "longname": "strip-types/src/component/base/base-controller-view.js~BaseControllerView#_loadTemplate",
    "access": "private",
    "description": "Autoloads the template in the development environment.",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "_loadTemplate"
      }
    ],
    "params": [],
    "generator": false
  },
  {
    "__docId__": 12,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_attachEvents",
    "memberof": "strip-types/src/component/base/base-controller-view.js~BaseControllerView",
    "longname": "strip-types/src/component/base/base-controller-view.js~BaseControllerView#_attachEvents",
    "access": "private",
    "description": "",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "_attachEvents"
      }
    ],
    "params": [],
    "generator": false
  },
  {
    "__docId__": 13,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "render",
    "memberof": "strip-types/src/component/base/base-controller-view.js~BaseControllerView",
    "longname": "strip-types/src/component/base/base-controller-view.js~BaseControllerView#render",
    "access": "public",
    "description": "",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "render"
      }
    ],
    "params": [],
    "generator": false
  },
  {
    "__docId__": 14,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_notifyParentOfStateChange",
    "memberof": "strip-types/src/component/base/base-controller-view.js~BaseControllerView",
    "longname": "strip-types/src/component/base/base-controller-view.js~BaseControllerView#_notifyParentOfStateChange",
    "access": null,
    "description": "",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 15,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/component/base/base-controller.js",
    "memberof": null,
    "longname": "strip-types/src/component/base/base-controller.js",
    "access": null,
    "description": null,
    "lineNumber": 3,
    "content": "\n/* global window */\n'use strict';\n\nimport BaseControllerView from './base-controller-view';\n// $FlowFixMe: Importing coffee modules\nimport EventBus from '../../../coffeescript/event_bus.coffee';\nimport Store from '../../store/store';\nimport BaseReducer from '../../reducer/base';\n\n/**\n * The base class for controllers\n * @module BaseController\n */\nclass BaseController {\n\n  /**\n   * @param {Object} overrides\n   * @constructor\n   */\n  constructor(overrides = {}) {\n    this._options = {\n      render: true,\n      locator: null,\n      id: 'BaseController',\n      loadView: true\n    };\n    Object.assign(this._options, overrides);\n\n    this._eventBus = EventBus;\n    this._id = this._options.id;\n    this._initializeRedux();\n\n    if (this._options.loadView) {\n      this._view = this._getViewInstance();\n      if (this._options.render) {\n        this.render();\n      }\n    }\n  }\n\n  /**\n   * @method _initializeRedux\n   * @private\n   */\n  _initializeRedux() {\n    if (typeof window !== 'undefined') {\n      this._stateId = `${ this._id }${ Math.random() }`;\n      const state = {};\n      state[this._stateId] = BaseReducer;\n      const reducer = {};\n      reducer[this._stateId] = BaseReducer;\n      this._store = Store.configureStore(reducer, state);\n      this._subscribeToStoreChanges();\n    }\n  }\n\n  /**\n   * @method getView\n   * @returns {BaseControllerView}\n   * @public\n   */\n  getView() {\n    return this._view;\n  }\n\n  /**\n   * @method _requireAndGetViewClass\n   * @returns {Class}\n   * @private\n   */\n  _requireAndGetViewClass() {\n    // eslint-disable-line\n    let dependency = null;\n\n    /* global modulejs */\n    // $FlowFixMe: modulejs is not defined\n    if (typeof modulejs !== 'undefined') {\n      dependency = modulejs.require(`${ this._id }View`);\n    }\n\n    if (dependency === null) {\n      const id = `${ this._getViewImportName() }`;\n      // $FlowFixMe: string interpolation\n      dependency = require(`./${ id }`).default;\n    }\n\n    return dependency;\n  }\n\n  /**\n   * @method _getViewInstance\n   * @returns {BaseControllerView}\n   * @private\n   */\n  _getViewInstance() {\n    const View = this._requireAndGetViewClass();\n    return new View({ locator: this._options.locator, controller: this, id: this._options.id });\n  }\n\n  /**\n   * @method render\n   * @public\n   */\n  render() {\n    this._eventBus.publish(`render${ this._id }`, { id: this._id });\n    this._view.render();\n  }\n\n  /**\n   * @method _getViewImportName\n   * @returns {String}\n   * @private\n   */\n  _getViewImportName() {\n    // TODO: this.constructor.name gets mangled by uglify and/or webpack, we'd need to find a way\n    // to determine dynamically the current's instance class name.\n    let viewName = `${ this._id }View`;\n    viewName = viewName.split('');\n    viewName = viewName.map((current, position) => {\n      let result = current;\n      if (position === 0) {\n        result = current.toLowerCase();\n      } else if (current === current.toUpperCase()) {\n        result = `-${ current.toLowerCase() }`;\n      }\n\n      return result;\n    });\n\n    return viewName.join('');\n  }\n\n  /**\n   * @method _subscribeToStoreChanges\n   * @private\n   */\n  _subscribeToStoreChanges() {\n    const self = this;\n    const select = state => state[self._stateId];\n\n    let currentState = null;\n    window.store = self._store;\n    this._store.subscribe(() => {\n      const previousState = currentState;\n      currentState = select(self._store.getState());\n      if (currentState !== previousState) {\n        // $FlowFixMe: Indexable signature not found\n        const viewMethod = self._view[currentState.status];\n        if (typeof viewMethod === 'function') {\n          viewMethod.bind(self._view)();\n        }\n      }\n    });\n  }\n\n  /**\n   * @param {String} state\n   * @method onStateChange\n   * @public\n   */\n  onStateChange(state) {\n    this._store.dispatch({ type: state });\n  }\n}\n\nexport default BaseController;"
  },
  {
    "__docId__": 16,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BaseController",
    "memberof": "strip-types/src/component/base/base-controller.js",
    "longname": "strip-types/src/component/base/base-controller.js~BaseController",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/component/base/base-controller.js",
    "importStyle": "BaseController",
    "description": "The base class for controllers",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "BaseController"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 17,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "strip-types/src/component/base/base-controller.js~BaseController",
    "longname": "strip-types/src/component/base/base-controller.js~BaseController#constructor",
    "access": null,
    "description": "",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "overrides",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 18,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_options",
    "memberof": "strip-types/src/component/base/base-controller.js~BaseController",
    "longname": "strip-types/src/component/base/base-controller.js~BaseController#_options",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 19,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_eventBus",
    "memberof": "strip-types/src/component/base/base-controller.js~BaseController",
    "longname": "strip-types/src/component/base/base-controller.js~BaseController#_eventBus",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 20,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_id",
    "memberof": "strip-types/src/component/base/base-controller.js~BaseController",
    "longname": "strip-types/src/component/base/base-controller.js~BaseController#_id",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 21,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_view",
    "memberof": "strip-types/src/component/base/base-controller.js~BaseController",
    "longname": "strip-types/src/component/base/base-controller.js~BaseController#_view",
    "access": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 22,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_initializeRedux",
    "memberof": "strip-types/src/component/base/base-controller.js~BaseController",
    "longname": "strip-types/src/component/base/base-controller.js~BaseController#_initializeRedux",
    "access": "private",
    "description": "",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "_initializeRedux"
      }
    ],
    "params": [],
    "generator": false
  },
  {
    "__docId__": 23,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_stateId",
    "memberof": "strip-types/src/component/base/base-controller.js~BaseController",
    "longname": "strip-types/src/component/base/base-controller.js~BaseController#_stateId",
    "access": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 24,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_store",
    "memberof": "strip-types/src/component/base/base-controller.js~BaseController",
    "longname": "strip-types/src/component/base/base-controller.js~BaseController#_store",
    "access": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 25,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getView",
    "memberof": "strip-types/src/component/base/base-controller.js~BaseController",
    "longname": "strip-types/src/component/base/base-controller.js~BaseController#getView",
    "access": "public",
    "description": "",
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getView"
      },
      {
        "tagName": "@returns",
        "tagValue": "{BaseControllerView}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "BaseControllerView"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 26,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_requireAndGetViewClass",
    "memberof": "strip-types/src/component/base/base-controller.js~BaseController",
    "longname": "strip-types/src/component/base/base-controller.js~BaseController#_requireAndGetViewClass",
    "access": "private",
    "description": "",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "_requireAndGetViewClass"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Class}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Class"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 27,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getViewInstance",
    "memberof": "strip-types/src/component/base/base-controller.js~BaseController",
    "longname": "strip-types/src/component/base/base-controller.js~BaseController#_getViewInstance",
    "access": "private",
    "description": "",
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "_getViewInstance"
      },
      {
        "tagName": "@returns",
        "tagValue": "{BaseControllerView}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "BaseControllerView"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 28,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "render",
    "memberof": "strip-types/src/component/base/base-controller.js~BaseController",
    "longname": "strip-types/src/component/base/base-controller.js~BaseController#render",
    "access": "public",
    "description": "",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "render"
      }
    ],
    "params": [],
    "generator": false
  },
  {
    "__docId__": 29,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getViewImportName",
    "memberof": "strip-types/src/component/base/base-controller.js~BaseController",
    "longname": "strip-types/src/component/base/base-controller.js~BaseController#_getViewImportName",
    "access": "private",
    "description": "",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "_getViewImportName"
      },
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 30,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_subscribeToStoreChanges",
    "memberof": "strip-types/src/component/base/base-controller.js~BaseController",
    "longname": "strip-types/src/component/base/base-controller.js~BaseController#_subscribeToStoreChanges",
    "access": "private",
    "description": "",
    "lineNumber": 138,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "_subscribeToStoreChanges"
      }
    ],
    "params": [],
    "generator": false
  },
  {
    "__docId__": 31,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onStateChange",
    "memberof": "strip-types/src/component/base/base-controller.js~BaseController",
    "longname": "strip-types/src/component/base/base-controller.js~BaseController#onStateChange",
    "access": "public",
    "description": "",
    "lineNumber": 162,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "onStateChange"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 32,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/component/base/event-actions.js",
    "memberof": null,
    "longname": "strip-types/src/component/base/event-actions.js",
    "access": null,
    "description": null,
    "lineNumber": 3,
    "content": "\n/* global EventListener */\n'use strict';\n\nimport BaseControllerView from './base-controller-view';\nimport { ElementEvents, DocumentEvents } from './event';\n\n/**\n * In charge of extending view objects with dynamic event handlers.\n * @module EventActions\n */\nclass EventActions {\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._eventListenerPrefix = 'on';\n    this._eventMap = new Map();\n  }\n\n  /**\n   * @param {BaseControllerView} target\n   * @method augment\n   * @public\n   */\n  augment(target) {\n    if (typeof document !== 'undefined') {\n      const attachCallback = options => {\n        // $FlowFixMe: Property not found\n        this._attachEventListener(options.element, options.eventName, event => {\n          options.eventHandler(event);\n          target._notifyParentOfStateChange(options.locatorName);\n          if (options.preventDefault) {\n            /* eslint-disable no-unused-expressions, no-param-reassign */\n            event.preventDefault ? event.preventDefault() : event.returnValue = false;\n            /* eslint-enable no-unused-expressions, no-param-reassign */\n          }\n        });\n      };\n\n      this._genericEventProcess(target, attachCallback);\n    }\n  }\n\n  /**\n   * @param {BaseControllerView} target\n   * @method clear\n   * @public\n   */\n  clear(target) {\n    const detachCallback = options => {\n      this._detachEventListener(options.element, options.eventName, options.eventHandler);\n    };\n\n    this._genericEventProcess(target, detachCallback);\n  }\n\n  /**\n   * @param {BaseControllerView} target\n   * @param {Function} callback\n   * @method _genericEventProcess\n   * @private\n   */\n  _genericEventProcess(target, callback) {\n    this._augmentTargetBasedOnEventTypes(target, ElementEvents, target.locators, callback);\n    this._augmentTargetBasedOnEventTypes(target, DocumentEvents, { Document: document }, callback);\n  }\n\n  /**\n   * @method _augmentTargetBasedOnEventTypes\n   * @private\n   */\n  _augmentTargetBasedOnEventTypes(target, events, locators, callback) {\n    for (let i = 0; i < events.length; i++) {\n      const eventName = events[i];\n      for (const locatorName in locators) {\n        // eslint-disable-line guard-for-in\n        const locator = locators[locatorName];\n        const locatorAsString = this._getLocatorString(locator);\n        let eventListenerName = this._getEventListenerName(eventName, locatorName);\n        let element;\n        if (locator === document) {\n          element = document;\n          eventListenerName = eventListenerName.replace('Document', '');\n        } else {\n          // TODO: Replace this by the proper DOM access polyfill\n          element = document.querySelector(locatorAsString);\n        }\n\n        let preventDefault = true;\n        if (locator !== null && typeof locator === 'object' && typeof locator.__set__ === 'undefined') {\n          // Views can avoid having to define the listeners methods by using object locators,\n          // that way we support passing simple state changes view -> controller -> dispatcher -> view\n          /* eslint-disable no-param-reassign */\n          if (typeof locator.handler === 'function') {\n            // $FlowFixMe: Review Indexable property not found\n            target[eventListenerName] = locator.handler;\n          } else {\n            // Empty event handler for simple message passing\n            // $FlowFixMe: Review Indexable property not found\n            target[eventListenerName] = () => {};\n          }\n          /* eslint-enable no-param-reassign */\n\n          locator.__set__ = true;\n          preventDefault = locator.preventDefault || true;\n        }\n\n        // $FlowFixMe: Indexable signature not found\n        if (typeof target[eventListenerName] === 'function') {\n          callback({\n            element,\n            eventName,\n            eventListenerName,\n            eventHandler: target[eventListenerName].bind(target),\n            locatorName,\n            preventDefault\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {Object|string} locator\n   * @returns {String}\n   * @method _getLocatorString\n   */\n  _getLocatorString(locator) {\n    return typeof locator === 'object' && locator !== null ? locator.id : locator;\n  }\n\n  /**\n   * @method _getEventListenerName\n   * @returns {String}\n   * @private\n   */\n  _getEventListenerName(eventName, locator) {\n    const upperFirstChar = str => `${ str[0].toUpperCase() }${ str.substring(1) }`;\n\n    let eventListenerName = this._eventListenerPrefix;\n    eventListenerName += upperFirstChar(locator);\n    eventListenerName += upperFirstChar(eventName);\n    return eventListenerName;\n  }\n\n  /**\n   * @method _attachEventListener\n   * @param {Node} element\n   * @param {String} eventName\n   * @param {Function} callback\n   * @private\n   */\n  _attachEventListener(element, eventName, callback) {\n    if (element !== null) {\n      element.addEventListener(eventName, callback, false);\n      this._eventMap.set(eventName, callback);\n    }\n  }\n\n  /**\n   * @method _detachEventListener\n   * @param {Node} element\n   * @param {String} eventName\n   * @param {Function} callback\n   * @private\n   */\n  _detachEventListener(element, eventName) {\n    const eventHandler = this._eventMap.get(eventName);\n    if (element !== null && typeof eventHandler !== 'undefined') {\n      element.removeEventListener(eventName, eventHandler, false);\n      this._eventMap.delete(eventName);\n    }\n  }\n\n}\n\nexport default EventActions;"
  },
  {
    "__docId__": 33,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EventActions",
    "memberof": "strip-types/src/component/base/event-actions.js",
    "longname": "strip-types/src/component/base/event-actions.js~EventActions",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/component/base/event-actions.js",
    "importStyle": "EventActions",
    "description": "In charge of extending view objects with dynamic event handlers.",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "EventActions"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 34,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "strip-types/src/component/base/event-actions.js~EventActions",
    "longname": "strip-types/src/component/base/event-actions.js~EventActions#constructor",
    "access": null,
    "description": "",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [],
    "generator": false
  },
  {
    "__docId__": 35,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_eventListenerPrefix",
    "memberof": "strip-types/src/component/base/event-actions.js~EventActions",
    "longname": "strip-types/src/component/base/event-actions.js~EventActions#_eventListenerPrefix",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 36,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_eventMap",
    "memberof": "strip-types/src/component/base/event-actions.js~EventActions",
    "longname": "strip-types/src/component/base/event-actions.js~EventActions#_eventMap",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 37,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "augment",
    "memberof": "strip-types/src/component/base/event-actions.js~EventActions",
    "longname": "strip-types/src/component/base/event-actions.js~EventActions#augment",
    "access": "public",
    "description": "",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "augment"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BaseControllerView"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 38,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clear",
    "memberof": "strip-types/src/component/base/event-actions.js~EventActions",
    "longname": "strip-types/src/component/base/event-actions.js~EventActions#clear",
    "access": "public",
    "description": "",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "clear"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BaseControllerView"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 39,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_genericEventProcess",
    "memberof": "strip-types/src/component/base/event-actions.js~EventActions",
    "longname": "strip-types/src/component/base/event-actions.js~EventActions#_genericEventProcess",
    "access": "private",
    "description": "",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "_genericEventProcess"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BaseControllerView"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 40,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_augmentTargetBasedOnEventTypes",
    "memberof": "strip-types/src/component/base/event-actions.js~EventActions",
    "longname": "strip-types/src/component/base/event-actions.js~EventActions#_augmentTargetBasedOnEventTypes",
    "access": "private",
    "description": "",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "_augmentTargetBasedOnEventTypes"
      }
    ],
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "events",
        "types": [
          "*"
        ]
      },
      {
        "name": "locators",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 41,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getLocatorString",
    "memberof": "strip-types/src/component/base/event-actions.js~EventActions",
    "longname": "strip-types/src/component/base/event-actions.js~EventActions#_getLocatorString",
    "access": null,
    "description": "",
    "lineNumber": 130,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      },
      {
        "tagName": "@method",
        "tagValue": "_getLocatorString"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "locator",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 42,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getEventListenerName",
    "memberof": "strip-types/src/component/base/event-actions.js~EventActions",
    "longname": "strip-types/src/component/base/event-actions.js~EventActions#_getEventListenerName",
    "access": "private",
    "description": "",
    "lineNumber": 139,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "_getEventListenerName"
      },
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "params": [
      {
        "name": "eventName",
        "types": [
          "*"
        ]
      },
      {
        "name": "locator",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 43,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_attachEventListener",
    "memberof": "strip-types/src/component/base/event-actions.js~EventActions",
    "longname": "strip-types/src/component/base/event-actions.js~EventActions#_attachEventListener",
    "access": "private",
    "description": "",
    "lineNumber": 155,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "_attachEventListener"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "eventName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 44,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_detachEventListener",
    "memberof": "strip-types/src/component/base/event-actions.js~EventActions",
    "longname": "strip-types/src/component/base/event-actions.js~EventActions#_detachEventListener",
    "access": "private",
    "description": "",
    "lineNumber": 169,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "_detachEventListener"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "eventName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 45,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/component/base/event.js",
    "memberof": null,
    "longname": "strip-types/src/component/base/event.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\n/**\n * Contains a list of DOM events that can be attached to a Node element\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n * @module ElementEvents\n */\n\nexport const ElementEvents = ['click', 'keypress', 'keyup', 'keydown'];\n\n/**\n * Contains a list of DOM events that can be attached to the document or window\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n * @module DocumentEvents\n */\nexport const DocumentEvents = ['load', 'error', 'scroll', 'resize'];"
  },
  {
    "__docId__": 46,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "ElementEvents",
    "memberof": "strip-types/src/component/base/event.js",
    "longname": "strip-types/src/component/base/event.js~ElementEvents",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/component/base/event.js",
    "importStyle": "{ElementEvents}",
    "description": "Contains a list of DOM events that can be attached to a Node element",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/Events"
    ],
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "ElementEvents"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 47,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DocumentEvents",
    "memberof": "strip-types/src/component/base/event.js",
    "longname": "strip-types/src/component/base/event.js~DocumentEvents",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/component/base/event.js",
    "importStyle": "{DocumentEvents}",
    "description": "Contains a list of DOM events that can be attached to the document or window",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/Events"
    ],
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "DocumentEvents"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 48,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/cookie-storage.js",
    "memberof": null,
    "longname": "strip-types/src/cookie-storage.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\n'use strict';\n\nimport Cookie from 'js-cookie';\n\n/**\n * Adapter object for storing data in cookies without depending on a specific implementation.\n * @module CookieStorage\n * @see https://www.npmjs.com/package/js-cookiethis._storage(id);\n */\nclass CookieStorage {\n  /**\n   * @param {String} id\n   * @param {String} value\n   * @param {Object} props\n   * @method set\n   */\n  set(id, value, props = {}) {\n    Cookie.set(id, value, props);\n  }\n\n  /**\n   * @param {String} id\n   * @method get\n   * @returns {String}\n   */\n  get(id) {\n    return Cookie.get(id);\n  }\n\n  /**\n   * @param {String} name\n   * @method remove\n   */\n  remove(name) {\n    Cookie.remove(name);\n  }\n\n  /**\n   * @method removeAll\n   */\n  removeAll() {\n    const cookies = document.cookie.split(';');\n    for (var i = 0; i < cookies.length; i++) {\n      let name = cookies[i].split('=')[0];\n      name = name.replace(' ', '');\n      Cookie.remove(name);\n    }\n  }\n}\n\nconst cookieStorage = new CookieStorage();\n\nexport default cookieStorage;"
  },
  {
    "__docId__": 49,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CookieStorage",
    "memberof": "strip-types/src/cookie-storage.js",
    "longname": "strip-types/src/cookie-storage.js~CookieStorage",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/cookie-storage.js",
    "importStyle": null,
    "description": "Adapter object for storing data in cookies without depending on a specific implementation.",
    "see": [
      "https://www.npmjs.com/package/js-cookiethis._storage(id);"
    ],
    "lineNumber": 11,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "CookieStorage"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "set",
    "memberof": "strip-types/src/cookie-storage.js~CookieStorage",
    "longname": "strip-types/src/cookie-storage.js~CookieStorage#set",
    "access": null,
    "description": "",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "set"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 51,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "get",
    "memberof": "strip-types/src/cookie-storage.js~CookieStorage",
    "longname": "strip-types/src/cookie-storage.js~CookieStorage#get",
    "access": null,
    "description": "",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "get"
      },
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 52,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "remove",
    "memberof": "strip-types/src/cookie-storage.js~CookieStorage",
    "longname": "strip-types/src/cookie-storage.js~CookieStorage#remove",
    "access": null,
    "description": "",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "remove"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 53,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeAll",
    "memberof": "strip-types/src/cookie-storage.js~CookieStorage",
    "longname": "strip-types/src/cookie-storage.js~CookieStorage#removeAll",
    "access": null,
    "description": "",
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "removeAll"
      }
    ],
    "params": [],
    "generator": false
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "cookieStorage",
    "memberof": "strip-types/src/cookie-storage.js",
    "longname": "strip-types/src/cookie-storage.js~cookieStorage",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/cookie-storage.js",
    "importStyle": "cookieStorage",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "strip-types/src/cookie-storage.js~CookieStorage"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/dom/core.js",
    "memberof": null,
    "longname": "strip-types/src/dom/core.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n/**\n * Encapsulates the DOM access layer\n * @module DomCore\n */\n\n// Fallback\n\nlet $ = () => {};\nif (!process || process.env.NODE_ENV !== 'test') {\n  $ = require('jquery/src/core');\n  require('jquery/src/core/init');\n  require('jquery/src/css');\n  require('jquery/src/attributes');\n  require('jquery/src/data');\n  require('jquery/src/dimensions');\n  require('jquery/src/offset');\n  require('jquery/src/effects');\n  require('jquery/src/deprecated');\n  require('jquery/src/event');\n}\n\nmodule.exports = $;"
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "$",
    "memberof": "strip-types/src/dom/core.js",
    "longname": "strip-types/src/dom/core.js~$",
    "access": null,
    "export": false,
    "importPath": "@jobandtalent/nevada/strip-types/src/dom/core.js",
    "importStyle": null,
    "description": "Encapsulates the DOM access layer",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "DomCore"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/emit-core-ready-event.js",
    "memberof": null,
    "longname": "strip-types/src/emit-core-ready-event.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n/**\n * When the core bundle is loaded we want to emit an event through the window object,\n * in order to let listener to subscribe to it.\n *\n * ```javascript\n * window.addEventListener('jt-core-ready', () => {\n *  // Now core is loaded, and I can use modulejs, Modulejs, etc.\n *  ...\n * });\n * ```\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\n */\n\nif (typeof window !== 'undefined') {\n  // Expose the jt-core-loaded through the window object\n  // TODO: only functional for modern browsers\n  if (typeof document.createEvent !== 'undefined') {\n    const event = new CustomEvent('jt-core-loaded');\n    window.dispatchEvent(event);\n  }\n}"
  },
  {
    "__docId__": 58,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/environment.js",
    "memberof": null,
    "longname": "strip-types/src/environment.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\n'use strict';\n\n/**\n * @module Environment\n */\n\nclass Environment {\n\n  constructor() {\n    /**\n     * @type {string} PRODUCTION\n     */\n    this.PRODUCTION = 'production';\n\n    /**\n     * @type {string} DEVELOPMENT\n     */\n    this.DEVELOPMENT = 'development';\n\n    /**\n     * @type {string} _environment\n     * @private\n     */\n    this._environment = this.PRODUCTION;\n  }\n\n  /**\n   * @param {string} environment\n   * @public\n   */\n  set environment(environment) {\n    this._environment = environment;\n  }\n\n  /**\n   * @returns {string}\n   * @public\n   */\n  get environment() {\n    return this._environment;\n  }\n\n  /**\n   * @method isDevelopment\n   * @return {Boolean}\n   */\n  isDevelopment() {\n    return this._environment === this.DEVELOPMENT;\n  }\n}\n\nexport default new Environment();"
  },
  {
    "__docId__": 59,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Environment",
    "memberof": "strip-types/src/environment.js",
    "longname": "strip-types/src/environment.js~Environment",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/environment.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "Environment"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 60,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "strip-types/src/environment.js~Environment",
    "longname": "strip-types/src/environment.js~Environment#constructor",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 61,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "PRODUCTION",
    "memberof": "strip-types/src/environment.js~Environment",
    "longname": "strip-types/src/environment.js~Environment#PRODUCTION",
    "access": null,
    "description": "",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "DEVELOPMENT",
    "memberof": "strip-types/src/environment.js~Environment",
    "longname": "strip-types/src/environment.js~Environment#DEVELOPMENT",
    "access": null,
    "description": "",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_environment",
    "memberof": "strip-types/src/environment.js~Environment",
    "longname": "strip-types/src/environment.js~Environment#_environment",
    "access": "private",
    "description": "",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 64,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "environment",
    "memberof": "strip-types/src/environment.js~Environment",
    "longname": "strip-types/src/environment.js~Environment#environment",
    "access": "public",
    "description": "",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "environment",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 65,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_environment",
    "memberof": "strip-types/src/environment.js~Environment",
    "longname": "strip-types/src/environment.js~Environment#_environment",
    "access": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "environment",
    "memberof": "strip-types/src/environment.js~Environment",
    "longname": "strip-types/src/environment.js~Environment#environment",
    "access": "public",
    "description": "",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 67,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isDevelopment",
    "memberof": "strip-types/src/environment.js~Environment",
    "longname": "strip-types/src/environment.js~Environment#isDevelopment",
    "access": null,
    "description": "",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "isDevelopment"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "environment",
    "memberof": "strip-types/src/environment.js",
    "longname": "strip-types/src/environment.js~environment",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/environment.js",
    "importStyle": "environment",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "strip-types/src/environment.js~Environment"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/erb-templating.js",
    "memberof": null,
    "longname": "strip-types/src/erb-templating.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nimport ModuleNaming from './module-naming';\n\n/**\n * @module ERBTemplating\n */\nconst ERBTemplating = {\n  /**\n   * @type {Array} _filters\n   * @private\n   */\n  _filters: [{\n    regex: /<%= link_to t\\(\"[a-zA-Z_]*\\.([a-zA-Z_]*)\"\\), ([a-zA-Z_]*), target: \"([a-zA-Z_]*)\" %>/,\n    replacement: '<a href=\"[2]\" target=\"[3]\">{1}</a>'\n  }, {\n    regex: /<%= t\\(\"[a-zA-Z_]*\\.([a-zA-Z_]*)\"\\) %>/,\n    replacement: '{1}'\n  }, {\n    regex: /<%= (.*) %>/,\n    replacement: '[1]'\n  }],\n\n  /**\n   * Applies the Regex replacements\n   * @param {String} input\n   * @returns {String}\n   */\n  filter(input) {\n    const self = this;\n    let result = input;\n    this._filters.forEach(currentFilter => {\n      while (result.match(currentFilter.regex)) {\n        const match = currentFilter.regex.exec(result);\n        const matches = match.slice(1);\n        const partial = self._replaceMatches(currentFilter.replacement, matches);\n        result = result.replace(currentFilter.regex, partial);\n      }\n    });\n\n    return result;\n  },\n\n  /**\n   * Matches the groups returned by the regular expression with the filter replacements.\n   * @param {String} placeholder\n   * @param {Array} matches\n   * @returns {String}\n   * @method _replaceMatches\n   */\n  _replaceMatches(placeholder, matches) {\n    const moduleNaming = new ModuleNaming();\n    let result = placeholder;\n    matches.forEach((currentMatch, pos) => {\n      if (result.indexOf(`{${ pos + 1 }}`) > -1) {\n        /* eslint-disable no-param-reassign */\n        currentMatch = moduleNaming.underScoreToCamelCase(currentMatch);\n        /* eslint-enable no-param-reassign */\n        result = result.replace(`{${ pos + 1 }}`, currentMatch);\n      } else {\n        result = result.replace(`[${ pos + 1 }]`, currentMatch);\n      }\n    });\n\n    return result;\n  }\n};\n\nexport default ERBTemplating;"
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "ERBTemplating",
    "memberof": "strip-types/src/erb-templating.js",
    "longname": "strip-types/src/erb-templating.js~ERBTemplating",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/erb-templating.js",
    "importStyle": "ERBTemplating",
    "description": "",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "ERBTemplating"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/module-naming.js",
    "memberof": null,
    "longname": "strip-types/src/module-naming.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\n'use strict';\n\n/**\n * Encapsulates logic in charge of processing framework module naming.\n * @module ModuleNaming\n */\n\nclass ModuleNaming {\n  /**\n   * @param {String} input\n   * @returns {String}\n   * @method underScoreToCamelCase\n   * @public\n   */\n  underScoreToCamelCase(input) {\n    return input.split('_').map(chunk => `${ chunk[0].toUpperCase() }${ chunk.substring(1) } `).join('').trim();\n  }\n}\n\nexport default ModuleNaming;"
  },
  {
    "__docId__": 72,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ModuleNaming",
    "memberof": "strip-types/src/module-naming.js",
    "longname": "strip-types/src/module-naming.js~ModuleNaming",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/module-naming.js",
    "importStyle": "ModuleNaming",
    "description": "Encapsulates logic in charge of processing framework module naming.",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "ModuleNaming"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 73,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "underScoreToCamelCase",
    "memberof": "strip-types/src/module-naming.js~ModuleNaming",
    "longname": "strip-types/src/module-naming.js~ModuleNaming#underScoreToCamelCase",
    "access": "public",
    "description": "",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      },
      {
        "tagName": "@method",
        "tagValue": "underScoreToCamelCase"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 74,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/modulejs-core.js",
    "memberof": null,
    "longname": "strip-types/src/modulejs-core.js",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "content": "/**\n * This file is left intentionally blank, it's populated automatically by webpack on\n * build time, generating the code needed for exposing the components as ModuleJS dependencies.\n * @module ModuleJSCore\n */"
  },
  {
    "__docId__": 75,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/polyfill/add-event-listener.js",
    "memberof": null,
    "longname": "strip-types/src/polyfill/add-event-listener.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "/* eslint-disable */\n!window.addEventListener && Element.prototype && function (polyfill) {\n\tfunction Event() {\n\t\t[polyfill];\n\t}\n\n\tEvent.prototype.preventDefault = function () {\n\t\tthis.nativeEvent.returnValue = false;\n\t};\n\n\tEvent.prototype.stopPropagation = function () {\n\t\tthis.nativeEvent.cancelBubble = true;\n\t};\n\n\tfunction addEventListener(type, listener, useCapture) {\n\t\tuseCapture = !!useCapture;\n\n\t\tvar cite = this;\n\n\t\tcite.__eventListener = cite.__eventListener || {};\n\t\tcite.__eventListener[type] = cite.__eventListener[type] || [[], []];\n\n\t\tif (!cite.__eventListener[type][0].length && !cite.__eventListener[type][1].length) {\n\t\t\tcite.__eventListener['on' + type] = function (nativeEvent) {\n\t\t\t\tvar newEvent = new Event(),\n\t\t\t\t    newNodeList = [],\n\t\t\t\t    node = nativeEvent.srcElement || cite,\n\t\t\t\t    property;\n\n\t\t\t\tfor (property in nativeEvent) {\n\t\t\t\t\tnewEvent[property] = nativeEvent[property];\n\t\t\t\t}\n\n\t\t\t\tnewEvent.currentTarget = cite;\n\t\t\t\tnewEvent.pageX = nativeEvent.clientX + document.documentElement.scrollLeft;\n\t\t\t\tnewEvent.pageY = nativeEvent.clientY + document.documentElement.scrollTop;\n\t\t\t\tnewEvent.target = node;\n\t\t\t\tnewEvent.timeStamp = +new Date();\n\n\t\t\t\tnewEvent.nativeEvent = nativeEvent;\n\n\t\t\t\twhile (node) {\n\t\t\t\t\tnewNodeList.unshift(node);\n\n\t\t\t\t\tnode = node.parentNode;\n\t\t\t\t}\n\n\t\t\t\tfor (var a, i = 0; a = newNodeList[i]; ++i) {\n\t\t\t\t\tif (a.__eventListener && a.__eventListener[type]) {\n\t\t\t\t\t\tfor (var aa, ii = 0; aa = a.__eventListener[type][0][ii]; ++ii) {\n\t\t\t\t\t\t\taa.call(cite, newEvent);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tnewNodeList.reverse();\n\n\t\t\t\tfor (var a, i = 0; (a = newNodeList[i]) && !nativeEvent.cancelBubble; ++i) {\n\t\t\t\t\tif (a.__eventListener && a.__eventListener[type]) {\n\t\t\t\t\t\tfor (var aa, ii = 0; (aa = a.__eventListener[type][1][ii]) && !nativeEvent.cancelBubble; ++ii) {\n\t\t\t\t\t\t\taa.call(cite, newEvent);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tnativeEvent.cancelBubble = true;\n\t\t\t};\n\n\t\t\tcite.attachEvent('on' + type, cite.__eventListener['on' + type]);\n\t\t}\n\n\t\tcite.__eventListener[type][useCapture ? 0 : 1].push(listener);\n\t}\n\n\tfunction removeEventListener(type, listener, useCapture) {\n\t\tuseCapture = !!useCapture;\n\n\t\tvar cite = this,\n\t\t    a;\n\n\t\tcite.__eventListener = cite.__eventListener || {};\n\t\tcite.__eventListener[type] = cite.__eventListener[type] || [[], []];\n\n\t\ta = cite.__eventListener[type][useCapture ? 0 : 1];\n\n\t\tfor (eventIndex = a.length - 1, eventLength = -1; eventIndex > eventLength; --eventIndex) {\n\t\t\tif (a[eventIndex] == listener) {\n\t\t\t\ta.splice(eventIndex, 1)[0][1];\n\t\t\t}\n\t\t}\n\n\t\tif (!cite.__eventListener[type][0].length && !cite.__eventListener[type][1].length) {\n\t\t\tcite.detachEvent('on' + type, cite.__eventListener['on' + type]);\n\t\t}\n\t}\n\n\twindow.constructor.prototype.addEventListener = document.constructor.prototype.addEventListener = Element.prototype.addEventListener = addEventListener;\n\twindow.constructor.prototype.removeEventListener = document.constructor.prototype.removeEventListener = Element.prototype.removeEventListener = removeEventListener;\n}();"
  },
  {
    "__docId__": 76,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/polyfill/custom-event.js",
    "memberof": null,
    "longname": "strip-types/src/polyfill/custom-event.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "/* eslint-disable */\n(function () {\n  function CustomEvent(event, params) {\n    params = params || { bubbles: false, cancelable: false, detail: undefined };\n    var evt = document.createEvent('CustomEvent');\n    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n    return evt;\n  }\n\n  CustomEvent.prototype = window.Event.prototype;\n\n  window.CustomEvent = CustomEvent;\n})();"
  },
  {
    "__docId__": 77,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/reducer/base.js",
    "memberof": null,
    "longname": "strip-types/src/reducer/base.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nconst Base = (state = {}, action) => {\n  // eslint-disable-line\n  return Object.assign({}, state, { status: action.type });\n};\n\nexport default Base;"
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Base",
    "memberof": "strip-types/src/reducer/base.js",
    "longname": "strip-types/src/reducer/base.js~Base",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/reducer/base.js",
    "importStyle": "Base",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/store/store.js",
    "memberof": null,
    "longname": "strip-types/src/store/store.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\n'use strict';\n/* global devToolsExtension */\n\nimport { combineReducers, createStore } from 'redux';\n\nclass Store {\n\n  constructor() {\n    this._store = null;\n    this._reducers = {};\n  }\n\n  /**\n   * Creates a new Redux Store\n   * @param  {Object} initialState\n   * @returns {Object}\n   * @public\n   */\n  configureStore(reducers, initialState = {}) {\n    this._reducers = Object.assign(reducers, this._reducers);\n    const combinedReducers = combineReducers(this._reducers);\n    const ext = window.devToolsExtension ? window.devToolsExtension() : undefined;\n    this._store = createStore(combinedReducers, Object.assign(initialState, this.getGlobalState()), ext);\n    return this._store;\n  }\n\n  getGlobalState() {\n    let state = {};\n    if (this._store !== null) {\n      state = this._store.getState();\n    }\n    return state;\n  }\n\n}\n\nexport default new Store();"
  },
  {
    "__docId__": 80,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Store",
    "memberof": "strip-types/src/store/store.js",
    "longname": "strip-types/src/store/store.js~Store",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/store/store.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "pseudoExport": true,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 81,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "strip-types/src/store/store.js~Store",
    "longname": "strip-types/src/store/store.js~Store#constructor",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 82,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_store",
    "memberof": "strip-types/src/store/store.js~Store",
    "longname": "strip-types/src/store/store.js~Store#_store",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_reducers",
    "memberof": "strip-types/src/store/store.js~Store",
    "longname": "strip-types/src/store/store.js~Store#_reducers",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "configureStore",
    "memberof": "strip-types/src/store/store.js~Store",
    "longname": "strip-types/src/store/store.js~Store#configureStore",
    "access": "public",
    "description": "Creates a new Redux Store",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "initialState",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 85,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_reducers",
    "memberof": "strip-types/src/store/store.js~Store",
    "longname": "strip-types/src/store/store.js~Store#_reducers",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_store",
    "memberof": "strip-types/src/store/store.js~Store",
    "longname": "strip-types/src/store/store.js~Store#_store",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getGlobalState",
    "memberof": "strip-types/src/store/store.js~Store",
    "longname": "strip-types/src/store/store.js~Store#getGlobalState",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "store",
    "memberof": "strip-types/src/store/store.js",
    "longname": "strip-types/src/store/store.js~store",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/store/store.js",
    "importStyle": "store",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "strip-types/src/store/store.js~Store"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/test-framework/core.js",
    "memberof": null,
    "longname": "strip-types/src/test-framework/core.js",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "content": "/**\n * Webpack module loader\n * @module unit-test framework\n */\nimport ModuleJS from './modulejs';\nimport Mock from './mock';\nimport Spy from './spy';\nimport DOMUtil from './dom-util';\n\n// Exposes the ModuleJS object in the global scope, that way\n// we can preserve compatibility with the current projects.\nModuleJS.attach();\n\n/* global modulejs */\nmodulejs.define('MockModule', () => Mock);\nmodulejs.define('SpyModule', () => Spy);\nmodulejs.define('DOMUtilModule', () => DOMUtil);"
  },
  {
    "__docId__": 90,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/test-framework/dom-mutation/factory.js",
    "memberof": null,
    "longname": "strip-types/src/test-framework/dom-mutation/factory.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\n'use strict';\n\nimport DOMMutationEvents from './mutation-events';\nimport DOMMutationObserver from './mutation-observer';\n\n/**\n * DOM Mutation Factory\n * An abstraction that allows us to abstract on what DOM Mutation API to use: Mutation Events or\n * Mutation Observer.\n *\n * Example of usage:\n *  import DOMMutationFactory from './dom-mutation/factory';\n *  const mutationObserver = DOMMutationFactory.get();\n *  const element = document.getElementById('test-element');\n *  mutationObserver.observe(element));\n *  ...\n *  // Mutation happens here\n *  ...\n *  assert(mutationObserver.getMutationData('addedNodes').length > 0);\n *  assert(mutationObserver.getMutationData('attributeName') === 'attribute-changed');\n */\nclass DOMMutationFactory {\n  /**\n   * Factory Method for building Mutation API's objects\n   * @method get\n   * @returns {DOMMutationObserver|DOMMutationEvents}\n   * @static\n   * @public\n   */\n  static get() {\n    /**\n     * @type {null|DOMMutationEvents|DOMMutationObserver} api\n     */\n    let api = null;\n\n    // Decide which version of the mutation observer objects we can use.\n    try {\n      if (DOMMutationFactory.isMutationObserverAvailable()) {\n        api = new DOMMutationObserver();\n      } else {\n        api = new DOMMutationEvents();\n      }\n    } catch (e) {\n      /* eslint-line-disable no-empty */\n    }\n\n    if (api === null) {\n      throw new Error('DOMMutationAdapter can\\'t be initialized: no DOM Mutation API available.');\n    }\n\n    return api;\n  }\n\n  /**\n   * The MutationObserver API is not available in very context, for instance we can't use it\n   * when running the unit tests in the console with jsdom.\n   *\n   * @method isMutationObserverAvailable\n   * @returns {Boolean}\n   * @static\n   * @public\n   */\n  static isMutationObserverAvailable() {\n    return typeof MutationObserver === 'function';\n  }\n}\n\nexport default DOMMutationFactory;"
  },
  {
    "__docId__": 91,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "DOMMutationFactory",
    "memberof": "strip-types/src/test-framework/dom-mutation/factory.js",
    "longname": "strip-types/src/test-framework/dom-mutation/factory.js~DOMMutationFactory",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/test-framework/dom-mutation/factory.js",
    "importStyle": "DOMMutationFactory",
    "description": "DOM Mutation Factory\nAn abstraction that allows us to abstract on what DOM Mutation API to use: Mutation Events or\nMutation Observer.\n\nExample of usage:\n import DOMMutationFactory from './dom-mutation/factory';\n const mutationObserver = DOMMutationFactory.get();\n const element = document.getElementById('test-element');\n mutationObserver.observe(element));\n ...\n // Mutation happens here\n ...\n assert(mutationObserver.getMutationData('addedNodes').length > 0);\n assert(mutationObserver.getMutationData('attributeName') === 'attribute-changed');",
    "lineNumber": 23,
    "interface": false
  },
  {
    "__docId__": 92,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "get",
    "memberof": "strip-types/src/test-framework/dom-mutation/factory.js~DOMMutationFactory",
    "longname": "strip-types/src/test-framework/dom-mutation/factory.js~DOMMutationFactory.get",
    "access": "public",
    "description": "Factory Method for building Mutation API's objects",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "get"
      },
      {
        "tagName": "@returns",
        "tagValue": "{DOMMutationObserver|DOMMutationEvents}"
      },
      {
        "tagName": "@static",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "DOMMutationObserver",
        "DOMMutationEvents"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 93,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "isMutationObserverAvailable",
    "memberof": "strip-types/src/test-framework/dom-mutation/factory.js~DOMMutationFactory",
    "longname": "strip-types/src/test-framework/dom-mutation/factory.js~DOMMutationFactory.isMutationObserverAvailable",
    "access": "public",
    "description": "The MutationObserver API is not available in very context, for instance we can't use it\nwhen running the unit tests in the console with jsdom.",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "isMutationObserverAvailable"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      },
      {
        "tagName": "@static",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 94,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/test-framework/dom-mutation/mutation-base.js",
    "memberof": null,
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-base.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\n'use strict';\n\n/**\n * DOM Mutation base object, it defines the interface and common methods used by the mutation\n * observer objects.\n */\n\nclass DOMMutationBase {\n\n  constructor() {\n    /**\n     * @type {Node|null} _node\n     * @private\n     */\n    this._node = null;\n\n    /**\n     * Stores the mutation data. This information is accessed via the getMutationData method.\n     *\n     * @type {Map} _mutationDataStorage\n     * @private\n     */\n    this._mutationDataStorage = new Map();\n\n    /**\n     * @type {Function|null} _onDOMChange\n     * @private\n     */\n    this._onDOMChange = null;\n  }\n\n  /**\n   * Are we observing already a DOM Node element?\n   * @returns {Boolean}\n   * @public\n   */\n  isActive() {\n    return this._node !== null;\n  }\n\n  /**\n   * @param {Node} node\n   * @method observe\n   * @returns {Promise}\n   * @public\n   */\n  observe(node) {\n    if (this.isActive()) {\n      this.restore();\n    }\n\n    this._assertInvalidElement(node);\n    this._node = node;\n\n    const self = this;\n    return new Promise(resolve => {\n      self._attachMutationEvents(node, () => {\n        resolve();\n      });\n    });\n  }\n\n  /**\n   * @param {Node} node\n   * @param {Function} onDOMChange\n   * @method _attachMutationEvents\n   * @private\n   */\n  /* eslint-disable no-unused-vars */\n  _attachMutationEvents(node, onDOMChange) {\n    throw new Error('DOMMutation _attachMutationEvents is not implemented');\n  }\n  /* eslint-enable no-unused-vars */\n\n  /**\n   * @param {String} key\n   * @param {Object|String|null} value\n   * @method _setMutationData\n   * @private\n   */\n  _setMutationData(key, value) {\n    this._mutationDataStorage.set(key, value);\n  }\n\n  /**\n   * @method _assertInvalidElement\n   * @param {Node} node\n   * @throws Error\n   * @private\n   */\n  _assertInvalidElement(node) {\n    if (!(node instanceof Node)) {\n      throw new Error('Trying to observe a non Node element');\n    }\n  }\n\n  /**\n   * Stop observing the previously watched DOM element\n   * @method restore\n   * @public\n   */\n  restore() {\n    throw new Error('DOMMutation restore is not implemented');\n  }\n\n  /**\n   * @param {String} key\n   * @returns {Object|null}\n   * @method getMutationData\n   * @public\n   */\n  getMutationData(key) {\n    return this._mutationDataStorage.get(key);\n  }\n}\n\nexport default DOMMutationBase;"
  },
  {
    "__docId__": 95,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "DOMMutationBase",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-base.js",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/test-framework/dom-mutation/mutation-base.js",
    "importStyle": "DOMMutationBase",
    "description": "DOM Mutation base object, it defines the interface and common methods used by the mutation\nobserver objects.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 96,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase#constructor",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 97,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_node",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase#_node",
    "access": "private",
    "description": "",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "Node",
        "null"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 98,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_mutationDataStorage",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase#_mutationDataStorage",
    "access": "private",
    "description": "Stores the mutation data. This information is accessed via the getMutationData method.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Map"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_onDOMChange",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase#_onDOMChange",
    "access": "private",
    "description": "",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "Function",
        "null"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isActive",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase#isActive",
    "access": "public",
    "description": "Are we observing already a DOM Node element?",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 101,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "observe",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase#observe",
    "access": "public",
    "description": "",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "observe"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 102,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_node",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase#_node",
    "access": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_attachMutationEvents",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase#_attachMutationEvents",
    "access": "private",
    "description": "",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "_attachMutationEvents"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onDOMChange",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 104,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_setMutationData",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase#_setMutationData",
    "access": "private",
    "description": "",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "_setMutationData"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object",
          "String",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 105,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_assertInvalidElement",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase#_assertInvalidElement",
    "access": "private",
    "description": "",
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "_assertInvalidElement"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Error"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 106,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "restore",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase#restore",
    "access": "public",
    "description": "Stop observing the previously watched DOM element",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "restore"
      }
    ],
    "params": [],
    "generator": false
  },
  {
    "__docId__": 107,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getMutationData",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase#getMutationData",
    "access": "public",
    "description": "",
    "lineNumber": 113,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object|null}"
      },
      {
        "tagName": "@method",
        "tagValue": "getMutationData"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "null"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 108,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/test-framework/dom-mutation/mutation-events.js",
    "memberof": null,
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-events.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\n'use strict';\n\nimport DOMMutationBase from './mutation-base';\n\n/**\n * DOM Mutation Events\n * Abstract layer on top of DOM Mutation Events API which is deprecated however we need to\n * use it in order to be able to observe DOM changes in all of the environments.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Mutation_events\n */\nclass DOMMutationEvents extends DOMMutationBase {\n\n  constructor() {\n    super();\n\n    /**\n     * @type {DOMMutationEvents} self\n     */\n    const self = this;\n\n    /**\n     * @type {Object} _eventListeners\n     * @private\n     */\n    this._eventListeners = {\n      DOMAttrModified(eventData) {\n        // null values on prevValue entry are stored as a string, we need to restore the\n        // original null type\n        let oldValue = eventData.prevValue;\n        if (oldValue === 'null') {\n          oldValue = null;\n        }\n\n        self._setMutationData('type', 'attributes');\n        self._setMutationData('attributeName', eventData.attrName);\n        self._setMutationData('newValue', eventData.newValue);\n        self._setMutationData('oldValue', oldValue);\n      },\n\n      DOMNodeInserted(eventData) {\n        self._setMutationData('type', 'childList');\n        self._setMutationData('element', eventData.target);\n      },\n\n      DOMNodeRemoved(eventData) {\n        self._setMutationData('type', 'childList');\n        self._setMutationData('element', eventData.target);\n      }\n    };\n  }\n\n  /**\n   * @param {Node} node\n   * @param {Function} onDOMChange\n   * @method _attachMutationEvents\n   * @private\n   */\n  _attachMutationEvents(node, onDOMChange) {\n    const self = this;\n    Object.keys(this._eventListeners).forEach(eventKey => {\n      node.addEventListener(eventKey, eventData => {\n        self._eventListeners[eventKey](eventData);\n        onDOMChange();\n      });\n    });\n  }\n\n  /**\n   * Stop observing the previously watched DOM element\n   * @method restore\n   * @public\n   */\n  restore() {\n    if (this.isActive()) {\n      const self = this;\n      Object.keys(this._eventListeners).forEach(eventKey => {\n        if (self._node !== null) {\n          self._node.removeEventListener(eventKey, self._eventListeners[eventKey]);\n        }\n      });\n\n      this._mutationDataStorage.clear();\n    }\n  }\n}\n\nexport default DOMMutationEvents;"
  },
  {
    "__docId__": 109,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "DOMMutationEvents",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-events.js",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-events.js~DOMMutationEvents",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/test-framework/dom-mutation/mutation-events.js",
    "importStyle": "DOMMutationEvents",
    "description": "DOM Mutation Events\nAbstract layer on top of DOM Mutation Events API which is deprecated however we need to\nuse it in order to be able to observe DOM changes in all of the environments.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Mutation_events"
    ],
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase"
    ]
  },
  {
    "__docId__": 110,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-events.js~DOMMutationEvents",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-events.js~DOMMutationEvents#constructor",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 111,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_eventListeners",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-events.js~DOMMutationEvents",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-events.js~DOMMutationEvents#_eventListeners",
    "access": "private",
    "description": "",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_attachMutationEvents",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-events.js~DOMMutationEvents",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-events.js~DOMMutationEvents#_attachMutationEvents",
    "access": "private",
    "description": "",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "_attachMutationEvents"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onDOMChange",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 113,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "restore",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-events.js~DOMMutationEvents",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-events.js~DOMMutationEvents#restore",
    "access": "public",
    "description": "Stop observing the previously watched DOM element",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "restore"
      }
    ],
    "params": [],
    "generator": false
  },
  {
    "__docId__": 114,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/test-framework/dom-mutation/mutation-observer.js",
    "memberof": null,
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-observer.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\n'use strict';\n\nimport DOMMutationBase from './mutation-base';\n\n/**\n * DOM Mutation Observer\n * Abstract layer on top of DOM Mutation Observer.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\n */\nclass DOMMutationObserver extends DOMMutationBase {\n\n  constructor() {\n    super();\n\n    /**\n     * @type {MutationObserver|null} _observer\n     * @private\n     */\n    this._observer = null;\n\n    /**\n     * @type {Object} _config\n     * @private\n     */\n    this._config = {\n      attributes: true,\n      childList: true,\n      characterData: true,\n      attributeOldValue: true,\n      subtree: true,\n      characterDataOldValue: true\n    };\n  }\n\n  /**\n   * @param {Node} node\n   * @param {Function} onDOMChange\n   * @method _attachMutationEvents\n   * @private\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord\n   */\n  _attachMutationEvents(node, onDOMChange) {\n    const self = this;\n    this._observer = new MutationObserver(mutations => {\n      // Only use the latest mutation\n      const mutation = mutations[mutations.length - 1];\n      const attributeName = mutation.attributeName;\n\n      self._setMutationData('type', mutation.type);\n      self._setMutationData('attributeName', attributeName);\n      // $FlowFixMe: Special type conflict we can't solve easily\n      self._setMutationData('newValue', mutation.target.getAttribute(attributeName));\n      self._setMutationData('oldValue', mutation.oldValue);\n\n      if (mutation.addedNodes.length > 0) {\n        self._setMutationData('element', mutation.addedNodes[0]);\n      }\n\n      if (mutation.removedNodes.length > 0) {\n        self._setMutationData('element', mutation.removedNodes[0]);\n      }\n\n      onDOMChange();\n    });\n\n    this._observer.observe(node, this._config);\n  }\n\n  /**\n   * Stop observing the previously watched DOM element\n   * @method restore\n   * @public\n   */\n  restore() {\n    if (this._observer !== null) {\n      this._observer.disconnect();\n      this._mutationDataStorage.clear();\n    }\n  }\n\n}\n\nexport default DOMMutationObserver;"
  },
  {
    "__docId__": 115,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "DOMMutationObserver",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-observer.js",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-observer.js~DOMMutationObserver",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/test-framework/dom-mutation/mutation-observer.js",
    "importStyle": "DOMMutationObserver",
    "description": "DOM Mutation Observer\nAbstract layer on top of DOM Mutation Observer.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver"
    ],
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "strip-types/src/test-framework/dom-mutation/mutation-base.js~DOMMutationBase"
    ]
  },
  {
    "__docId__": 116,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-observer.js~DOMMutationObserver",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-observer.js~DOMMutationObserver#constructor",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 117,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_observer",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-observer.js~DOMMutationObserver",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-observer.js~DOMMutationObserver#_observer",
    "access": "private",
    "description": "",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "MutationObserver",
        "null"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_config",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-observer.js~DOMMutationObserver",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-observer.js~DOMMutationObserver#_config",
    "access": "private",
    "description": "",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_attachMutationEvents",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-observer.js~DOMMutationObserver",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-observer.js~DOMMutationObserver#_attachMutationEvents",
    "access": "private",
    "description": "",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord"
    ],
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "_attachMutationEvents"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onDOMChange",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 120,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_observer",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-observer.js~DOMMutationObserver",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-observer.js~DOMMutationObserver#_observer",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "restore",
    "memberof": "strip-types/src/test-framework/dom-mutation/mutation-observer.js~DOMMutationObserver",
    "longname": "strip-types/src/test-framework/dom-mutation/mutation-observer.js~DOMMutationObserver#restore",
    "access": "public",
    "description": "Stop observing the previously watched DOM element",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "restore"
      }
    ],
    "params": [],
    "generator": false
  },
  {
    "__docId__": 122,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/test-framework/dom-util.js",
    "memberof": null,
    "longname": "strip-types/src/test-framework/dom-util.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\n'use strict';\n\n/**\n * Encapsulates utilities for DOM elements and events handling, intended to used\n * by test cases.\n * @module DOMUtil\n */\n\nclass DOMUtil {\n  /**\n   * @method _generateEvent\n   * @param {String} type\n   * @private\n   */\n  _generateEventObject(type) {\n    return new Event(type, {\n      view: window,\n      bubbles: true,\n      cancelable: true\n    });\n  }\n\n  /**\n   * @method sendClickEvent\n   * @param {String} id\n   * @public\n   */\n  sendClickEvent(id) {\n    const clickEvent = this._generateEventObject('click');\n    document.getElementById(id).dispatchEvent(clickEvent);\n  }\n\n  /**\n   * @method sendResizeEvent\n   * @public\n   */\n  sendResizeEvent() {\n    const resizeEvent = this._generateEventObject('resize');\n    document.dispatchEvent(resizeEvent);\n  }\n}\n\nexport default new DOMUtil();"
  },
  {
    "__docId__": 123,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "DOMUtil",
    "memberof": "strip-types/src/test-framework/dom-util.js",
    "longname": "strip-types/src/test-framework/dom-util.js~DOMUtil",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/test-framework/dom-util.js",
    "importStyle": null,
    "description": "Encapsulates utilities for DOM elements and events handling, intended to used\nby test cases.",
    "lineNumber": 10,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "DOMUtil"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 124,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_generateEventObject",
    "memberof": "strip-types/src/test-framework/dom-util.js~DOMUtil",
    "longname": "strip-types/src/test-framework/dom-util.js~DOMUtil#_generateEventObject",
    "access": "private",
    "description": "",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "_generateEvent"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 125,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "sendClickEvent",
    "memberof": "strip-types/src/test-framework/dom-util.js~DOMUtil",
    "longname": "strip-types/src/test-framework/dom-util.js~DOMUtil#sendClickEvent",
    "access": "public",
    "description": "",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "sendClickEvent"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 126,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "sendResizeEvent",
    "memberof": "strip-types/src/test-framework/dom-util.js~DOMUtil",
    "longname": "strip-types/src/test-framework/dom-util.js~DOMUtil#sendResizeEvent",
    "access": "public",
    "description": "",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "sendResizeEvent"
      }
    ],
    "params": [],
    "generator": false
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "dOMUtil",
    "memberof": "strip-types/src/test-framework/dom-util.js",
    "longname": "strip-types/src/test-framework/dom-util.js~dOMUtil",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/test-framework/dom-util.js",
    "importStyle": "dOMUtil",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "strip-types/src/test-framework/dom-util.js~DOMUtil"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/test-framework/inject.js",
    "memberof": null,
    "longname": "strip-types/src/test-framework/inject.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\n'use strict';\n\n/**\n * Base object for global injection\n */\n\nclass Inject {\n\n  /**\n   * Assures compatibility between different environments (nodejs headless vs browser),\n   * in order to support multiple execution modes.\n   *\n   * @method _getGlobalObject\n   * @returns {Object}\n   * @private\n   */\n  static _getGlobalObject() {\n    return typeof global === 'undefined' ? window : global;\n  }\n\n  /**\n   * Injects the encapsulated object in the global scope\n   * @param  {Object} instance\n   * @param  {String} id\n   * @method attach\n   * @public\n   */\n  static attach(instance, id) {\n    var global = Inject._getGlobalObject();\n    Object.defineProperty(global, id, { configurable: true, writable: true });\n    global[id] = instance;\n  }\n\n  /**\n   * Removes the mocked object from the global scope\n   * @param  {String} id\n   * @method destroy\n   * @public\n   */\n  static destroy(id) {\n    var global = Inject._getGlobalObject();\n    delete global[id];\n  }\n\n}\n\nexport default Inject;"
  },
  {
    "__docId__": 129,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Inject",
    "memberof": "strip-types/src/test-framework/inject.js",
    "longname": "strip-types/src/test-framework/inject.js~Inject",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/test-framework/inject.js",
    "importStyle": "Inject",
    "description": "Base object for global injection",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 130,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "_getGlobalObject",
    "memberof": "strip-types/src/test-framework/inject.js~Inject",
    "longname": "strip-types/src/test-framework/inject.js~Inject._getGlobalObject",
    "access": "private",
    "description": "Assures compatibility between different environments (nodejs headless vs browser),\nin order to support multiple execution modes.",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "_getGlobalObject"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 131,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "attach",
    "memberof": "strip-types/src/test-framework/inject.js~Inject",
    "longname": "strip-types/src/test-framework/inject.js~Inject.attach",
    "access": "public",
    "description": "Injects the encapsulated object in the global scope",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "attach"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "instance",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 132,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "destroy",
    "memberof": "strip-types/src/test-framework/inject.js~Inject",
    "longname": "strip-types/src/test-framework/inject.js~Inject.destroy",
    "access": "public",
    "description": "Removes the mocked object from the global scope",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "destroy"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 133,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/test-framework/mock.js",
    "memberof": null,
    "longname": "strip-types/src/test-framework/mock.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\n'use strict';\n\nimport Inject from './inject';\n\n/**\n * Base object for Mock objects\n */\nclass Mock {\n\n  /**\n   * @param {String} id\n   * @constructor\n   */\n  constructor(id) {\n    /**\n     * @var {String} _id\n     * @private\n     */\n    this._id = id;\n\n    /**\n     * The _mock object contains the object that represents the functionality\n     * that we wan to emulate. If we want to inspect its usage via sinon, that\n     * can be done accessing to the object by the MockModule.get() method,\n     * as in the following example:\n     * ```javascript\n     *   var mock = MockModule.get();\n     *   sinon.spy(mock, 'method');\n     *   assertTrue(mock.method.called);\n     * ```\n     *\n     * @var {Object|Function|null} _mock\n     * @private\n     */\n    this._mock = null;\n  }\n\n  /**\n   * Injects the encapsulated object in the global scope\n   * @method attach\n   * @public\n   */\n  attach() {\n    Inject.attach(this._mock, this._id);\n  }\n\n  /**\n   * Removes the mocked object from the global scope\n   * @method destroy\n   * @public\n   */\n  destroy() {\n    Inject.destroy(this._id);\n  }\n\n  /**\n   * Exposes the mocked object\n   * @returns {Object|null}\n   * @method get\n   * @public\n   */\n  get mock() {\n    return this._mock;\n  }\n\n  /**\n   * Assigns the mocked object\n   * @param {Object|null} mock\n   * @method set\n   * @public\n   */\n  set mock(mock) {\n    this._mock = mock;\n  }\n}\n\nexport default Mock;"
  },
  {
    "__docId__": 134,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Mock",
    "memberof": "strip-types/src/test-framework/mock.js",
    "longname": "strip-types/src/test-framework/mock.js~Mock",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/test-framework/mock.js",
    "importStyle": "Mock",
    "description": "Base object for Mock objects",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 135,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "strip-types/src/test-framework/mock.js~Mock",
    "longname": "strip-types/src/test-framework/mock.js~Mock#constructor",
    "access": null,
    "description": "",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 136,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_id",
    "memberof": "strip-types/src/test-framework/mock.js~Mock",
    "longname": "strip-types/src/test-framework/mock.js~Mock#_id",
    "access": "private",
    "description": "",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@var",
        "tagValue": "{String} _id"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_mock",
    "memberof": "strip-types/src/test-framework/mock.js~Mock",
    "longname": "strip-types/src/test-framework/mock.js~Mock#_mock",
    "access": "private",
    "description": "The _mock object contains the object that represents the functionality\nthat we wan to emulate. If we want to inspect its usage via sinon, that\ncan be done accessing to the object by the MockModule.get() method,\nas in the following example:\n```javascript\n  var mock = MockModule.get();\n  sinon.spy(mock, 'method');\n  assertTrue(mock.method.called);\n```",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@var",
        "tagValue": "{Object|Function|null} _mock"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "attach",
    "memberof": "strip-types/src/test-framework/mock.js~Mock",
    "longname": "strip-types/src/test-framework/mock.js~Mock#attach",
    "access": "public",
    "description": "Injects the encapsulated object in the global scope",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "attach"
      }
    ],
    "params": [],
    "generator": false
  },
  {
    "__docId__": 139,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "destroy",
    "memberof": "strip-types/src/test-framework/mock.js~Mock",
    "longname": "strip-types/src/test-framework/mock.js~Mock#destroy",
    "access": "public",
    "description": "Removes the mocked object from the global scope",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "destroy"
      }
    ],
    "params": [],
    "generator": false
  },
  {
    "__docId__": 140,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "mock",
    "memberof": "strip-types/src/test-framework/mock.js~Mock",
    "longname": "strip-types/src/test-framework/mock.js~Mock#mock",
    "access": "public",
    "description": "Exposes the mocked object",
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object|null}"
      },
      {
        "tagName": "@method",
        "tagValue": "get"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "null"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 141,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "mock",
    "memberof": "strip-types/src/test-framework/mock.js~Mock",
    "longname": "strip-types/src/test-framework/mock.js~Mock#mock",
    "access": "public",
    "description": "Assigns the mocked object",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "set"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "mock",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 142,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_mock",
    "memberof": "strip-types/src/test-framework/mock.js~Mock",
    "longname": "strip-types/src/test-framework/mock.js~Mock#_mock",
    "access": null,
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/test-framework/modulejs.js",
    "memberof": null,
    "longname": "strip-types/src/test-framework/modulejs.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\n'use strict';\n\n/**\n * The following module defines a Mock for ModuleJS\n *\n * - Usage:\n *   ```javascript\n *     const ModuleJSMock = require('test-framework/modulejs');\n *\n *     var module = new ModuleJSMock();\n *     var UploadFileModule = moduleJSMock.getModule('UploadFile');\n *     var uploadFile = new UploadFileModule();\n *   ```\n *\n * @module ModuleJS\n */\n\nimport Mock from './mock';\n\n/**\n * Defines a Mock for ModuleJS\n */\nclass ModuleJS extends Mock {\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    super('modulejs');\n\n    /**\n     * Stores modules encapsulated by modulejs\n     * @type {Object} _modules\n     * @private\n     */\n    this._modules = {};\n\n    var self = this;\n\n    /**\n     * @type {Object|Function|null} mock\n     * @private\n     */\n    this._mock = {\n      /**\n       * @param {String} moduleId\n       * @method define\n       */\n      define(moduleId) {\n        var constructor = arguments[arguments.length - 1];\n        var dependencies = [];\n        if (arguments.length > 2) {\n          dependencies = arguments[1].map(dependency => self._modules[dependency]);\n        }\n        self._modules[moduleId] = constructor.apply(null, dependencies);\n      },\n      /**\n       * @param {String} moduleName\n       * @returns {Object|null}\n       * @method require\n       */\n      require(moduleName) {\n        return typeof self._modules[moduleName] !== 'undefined' ? self._modules[moduleName] : null;\n      }\n    };\n  }\n\n  /**\n   * Returns the module encapsulated by modulejs.\n   * @param {String} id\n   * @method getModule\n   * @returns {null|Object}\n   * @public\n   */\n  getModule(id) {\n    // Modulejs uses internally the nomenclature 'ObjectModule', in order to\n    // improve readability we are abstracting for that so you just need to do\n    // ModuleJS.getModule('Object') instead of ModuleJs.getModule('ObjectModule').\n    const moduleName = `${ id }Module`;\n    return this._modules[moduleName] !== 'undefined' ? this._modules[moduleName] : null;\n  }\n}\n\nmodule.exports = new ModuleJS();"
  },
  {
    "__docId__": 144,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ModuleJS",
    "memberof": "strip-types/src/test-framework/modulejs.js",
    "longname": "strip-types/src/test-framework/modulejs.js~ModuleJS",
    "access": null,
    "export": false,
    "importPath": "@jobandtalent/nevada/strip-types/src/test-framework/modulejs.js",
    "importStyle": null,
    "description": "Defines a Mock for ModuleJS",
    "lineNumber": 24,
    "interface": false,
    "extends": [
      "strip-types/src/test-framework/mock.js~Mock"
    ]
  },
  {
    "__docId__": 145,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "strip-types/src/test-framework/modulejs.js~ModuleJS",
    "longname": "strip-types/src/test-framework/modulejs.js~ModuleJS#constructor",
    "access": null,
    "description": "",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [],
    "generator": false
  },
  {
    "__docId__": 146,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_modules",
    "memberof": "strip-types/src/test-framework/modulejs.js~ModuleJS",
    "longname": "strip-types/src/test-framework/modulejs.js~ModuleJS#_modules",
    "access": "private",
    "description": "Stores modules encapsulated by modulejs",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 147,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_mock",
    "memberof": "strip-types/src/test-framework/modulejs.js~ModuleJS",
    "longname": "strip-types/src/test-framework/modulejs.js~ModuleJS#_mock",
    "access": "private",
    "description": "",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Object",
        "Function",
        "null"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getModule",
    "memberof": "strip-types/src/test-framework/modulejs.js~ModuleJS",
    "longname": "strip-types/src/test-framework/modulejs.js~ModuleJS#getModule",
    "access": "public",
    "description": "Returns the module encapsulated by modulejs.",
    "lineNumber": 76,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getModule"
      },
      {
        "tagName": "@returns",
        "tagValue": "{null|Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null",
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 149,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/test-framework/proxy-spy-handler.js",
    "memberof": null,
    "longname": "strip-types/src/test-framework/proxy-spy-handler.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\n'use strict';\n\n// Required to provide Request object support\n\nimport Reflect from 'core-js/library/es6/reflect';\n\n/**\n * Defines a Proxy Handler used by the Proxy interceptor object.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\n * @module ProxySpyHandler\n */\nclass ProxySpyHandler {\n\n  /**\n   * @param {Object} target\n   * @param {Array} exceptions\n   */\n  constructor(target, exceptions) {\n    const self = this;\n\n    /**\n     * @type {Array} _exceptions\n     * @private\n     */\n    this._exceptions = exceptions || [];\n\n    /**\n     * @type {Boolean} __modulejs__\n     * @private\n     */\n    this.__modulejs__ = false;\n\n    /**\n     * Storage of the methods and properties that we want to observe\n     * @type {Map} _spyMap\n     * @private\n     */\n    this._spyMap = new Map();\n\n    /**\n     * @type {Object} _proxyHandler\n     * @private\n     */\n    this._proxyHandler = {\n      getOwnPropertyDescriptor: (obj, prop) => {\n        const value = target[prop];\n        return { configurable: true, enumerable: true, value };\n      },\n\n      get(obj, key) {\n        const originalValue = Reflect.get(target, key);\n        let result = originalValue;\n\n        if (typeof originalValue === 'function') {\n          if (self._exceptions.indexOf(key) === -1) {\n            result = () => {\n              self._registerAccess(key, originalValue !== undefined);\n            };\n          } else {\n            self._registerAccess(key, originalValue !== undefined);\n          }\n        } else {\n          self._registerAccess(key, originalValue !== undefined);\n        }\n\n        return result;\n      },\n\n      set(obj, key) {\n        self._registerAccess(key, typeof target[key] !== 'undefined');\n        return true;\n      }\n    };\n  }\n\n  /**\n   * @param {String} propertyName\n   * @param {Boolean} isDefined true if the property exists\n   * @method _registerAccess\n   * @private\n   */\n  _registerAccess(propertyName, isDefined) {\n    let register = {\n      count: 0,\n      called: false,\n      isDefined\n    };\n\n    if (this._spyMap.has(propertyName)) {\n      // This provides types safety\n      const registerCandidate = this._spyMap.get(propertyName);\n      if (typeof registerCandidate !== 'undefined') {\n        register = registerCandidate;\n      }\n    }\n\n    register.count++;\n    register.called = true;\n    this._spyMap.set(propertyName, register);\n  }\n\n  /**\n   * @returns {ProxyHandler}\n   * @method get\n   * @public\n   */\n  get() {\n    return this._proxyHandler;\n  }\n\n  /**\n   * @param {String} propertyName\n   * @returns {Object}\n   * @method getPropertyRegister\n   * @public\n   */\n  getPropertyRegister(propertyName) {\n    const register = this._spyMap.get(propertyName);\n    return typeof register !== 'undefined' ? register : null;\n  }\n}\n\nexport default ProxySpyHandler;"
  },
  {
    "__docId__": 150,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ProxySpyHandler",
    "memberof": "strip-types/src/test-framework/proxy-spy-handler.js",
    "longname": "strip-types/src/test-framework/proxy-spy-handler.js~ProxySpyHandler",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/test-framework/proxy-spy-handler.js",
    "importStyle": "ProxySpyHandler",
    "description": "Defines a Proxy Handler used by the Proxy interceptor object.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy"
    ],
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "ProxySpyHandler"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 151,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "strip-types/src/test-framework/proxy-spy-handler.js~ProxySpyHandler",
    "longname": "strip-types/src/test-framework/proxy-spy-handler.js~ProxySpyHandler#constructor",
    "access": null,
    "description": "",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "exceptions",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 152,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_exceptions",
    "memberof": "strip-types/src/test-framework/proxy-spy-handler.js~ProxySpyHandler",
    "longname": "strip-types/src/test-framework/proxy-spy-handler.js~ProxySpyHandler#_exceptions",
    "access": "private",
    "description": "",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 153,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "__modulejs__",
    "memberof": "strip-types/src/test-framework/proxy-spy-handler.js~ProxySpyHandler",
    "longname": "strip-types/src/test-framework/proxy-spy-handler.js~ProxySpyHandler#__modulejs__",
    "access": "private",
    "description": "",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 154,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_spyMap",
    "memberof": "strip-types/src/test-framework/proxy-spy-handler.js~ProxySpyHandler",
    "longname": "strip-types/src/test-framework/proxy-spy-handler.js~ProxySpyHandler#_spyMap",
    "access": "private",
    "description": "Storage of the methods and properties that we want to observe",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Map"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 155,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_proxyHandler",
    "memberof": "strip-types/src/test-framework/proxy-spy-handler.js~ProxySpyHandler",
    "longname": "strip-types/src/test-framework/proxy-spy-handler.js~ProxySpyHandler#_proxyHandler",
    "access": "private",
    "description": "",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_registerAccess",
    "memberof": "strip-types/src/test-framework/proxy-spy-handler.js~ProxySpyHandler",
    "longname": "strip-types/src/test-framework/proxy-spy-handler.js~ProxySpyHandler#_registerAccess",
    "access": "private",
    "description": "",
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "_registerAccess"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "propertyName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isDefined",
        "description": "true if the property exists"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 157,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "get",
    "memberof": "strip-types/src/test-framework/proxy-spy-handler.js~ProxySpyHandler",
    "longname": "strip-types/src/test-framework/proxy-spy-handler.js~ProxySpyHandler#get",
    "access": "public",
    "description": "",
    "lineNumber": 108,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ProxyHandler}"
      },
      {
        "tagName": "@method",
        "tagValue": "get"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ProxyHandler"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 158,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getPropertyRegister",
    "memberof": "strip-types/src/test-framework/proxy-spy-handler.js~ProxySpyHandler",
    "longname": "strip-types/src/test-framework/proxy-spy-handler.js~ProxySpyHandler#getPropertyRegister",
    "access": "public",
    "description": "",
    "lineNumber": 118,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      },
      {
        "tagName": "@method",
        "tagValue": "getPropertyRegister"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "propertyName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 159,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/src/test-framework/spy.js",
    "memberof": null,
    "longname": "strip-types/src/test-framework/spy.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\n'use strict';\n\nimport Inject from './inject';\nimport ProxyHandler from './proxy-spy-handler';\nimport ModuleJS from '@lrsjng/modulejs';\n\n/**\n * The following module defines a Spy object used to intercept\n * operations on object methods and properties.\n *\n * Example of usage:\n *   ```javascript\n *     import Spy from 'test-framework/spy';\n *     const objectToSpy = { method: function() {} };\n *     var spy = new Spy();\n *     const spied = spy.watch(objectToSpy);\n *     spied.method();\n *     assert(spied.count === 1);\n *     assert(spied.called === true);\n *   ```\n *\n * It adds a layer on top of the es6 `Proxy` object combined with Reflect API,\n * that way we can intercept method and property calls, both defined and undefined.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\n * @module Spy\n */\nclass Spy {\n\n  constructor() {\n    const self = this;\n\n    /**\n     * @private\n     */\n    /* eslint-disable arrow-body-style */\n    this._mockedObjectExtensions = name => {\n      return {\n        __restore__() {\n          self._spiedObjectsSet.delete(self._originalObject);\n          if (self._handler !== null && !self._handler.__modulejs__) {\n            Inject.attach(self._originalObject, name);\n          } else {\n            delete ModuleJS._private.definitions[name];\n            ModuleJS.define(name, self._originalObject);\n          }\n          self._handler = null;\n        }\n      };\n    };\n    /* eslint-enable arrow-body-style */\n\n    /**\n     * @private\n     */\n    this._originalObject = {};\n\n    /**\n     * @private\n     */\n    this._handler = null;\n\n    /**\n     * @private\n     */\n    this._spiedObjectsSet = new WeakSet();\n  }\n\n  /**\n   * @param {Object} instance\n   * @param {String} method\n   * @param {Function|undefined} stub\n   * @method intercept\n   * @public\n   */\n  intercept(instance, method, stub) {\n    const original = instance[method];\n    /* eslint-disable no-param-reassign */\n    instance[method] = (...args) => {\n      instance[method].counter++;\n      instance[method].called = true;\n\n      let callResult = null;\n      if (typeof stub === 'function') {\n        callResult = stub.apply(instance, args);\n      } else {\n        callResult = original.apply(instance, args);\n      }\n\n      return callResult;\n    };\n\n    instance[method].restore = function () {\n      instance[method] = original;\n    };\n\n    instance[method].counter = 0;\n    instance[method].called = false;\n    instance[method].__spy__ = true;\n    /* eslint-enable no-param-reassign */\n  }\n\n  /**\n   * Checks if a method is being watched\n   * @param {Object} instance\n   * @param {String} method\n   * @public\n   */\n  watched(instance, method) {\n    return typeof instance[method].__spy__ !== 'undefined';\n  }\n\n  /**\n   * Removes the spy layer on an object's method\n   * @param {ProxyHandler} mock\n   * @public\n   */\n  restore(mock) {\n    if (typeof mock.__restore__ === 'function') {\n      mock.__restore__();\n    }\n  }\n\n  /**\n   * Watch an object methods and properties via a proxy\n   * @param {Object} instance\n   * @returns {Proxy}\n   * @public\n   */\n  watch(instance) {\n    this._assertAndRegisterObjectOverride(instance);\n\n    this._handler = new ProxyHandler(instance, Object.keys(this._mockedObjectExtensions()));\n    return this._initializeProxy(this._handler.get(), Object.getPrototypeOf(instance));\n  }\n\n  /**\n   * Initializes a proxy object\n   * @param {ProxyHandler} handler\n   * @param {Object} proto\n   * @private\n   */\n  _initializeProxy(handler, proto) {\n    let proxy;\n    if (typeof Proxy.create !== 'undefined') {\n      proxy = Proxy.create(handler, proto);\n    } else {\n      proxy = new Proxy(proto, handler);\n    }\n    return proxy;\n  }\n\n  /**\n   * @throws Error\n   * @param {Object} instance\n   * @private\n   */\n  _assertAndRegisterObjectOverride(instance) {\n    if (this._spiedObjectsSet.has(instance)) {\n      throw new Error('Spy can\\'t attach to objects that are already being spied');\n    }\n\n    this._spiedObjectsSet.add(instance);\n  }\n\n  /**\n   * @param {String} name\n   * @returns {Object|null}\n   * @public\n   */\n  get(name) {\n    return this._handler !== null ? this._handler.getPropertyRegister(name) : null;\n  }\n\n  /**\n   * Creates a proxy object\n   * @param  {Object} object\n   * @param  {String} id\n   * @param {Boolean} useModuleJS\n   * @returns {ProxyHandler}\n   * @public\n   */\n  mock(object, id, useModuleJS = false) {\n    /* eslint-disable no-param-reassign */\n    this._originalObject = object;\n\n    let name = this._processObjectName(object.constructor.name);\n    if (typeof id !== 'undefined') {\n      name = id;\n    }\n\n    var objectExtensions = this._mockedObjectExtensions(name);\n    Object.keys(objectExtensions).forEach(key => {\n      object[key] = objectExtensions[key];\n    });\n\n    const proxy = this.watch(object);\n    if (useModuleJS) {\n      if (typeof ModuleJS._private.definitions[name] !== 'undefined') {\n        delete ModuleJS._private.definitions[name];\n      }\n\n      ModuleJS.define(name, () => proxy);\n      if (this._handler !== null) {\n        this._handler.__modulejs__ = true;\n      }\n    } else {\n      Inject.attach(proxy, name);\n    }\n\n    /* eslint-enable no-param-reassign */\n    return proxy;\n  }\n\n  /**\n   * Converts the first character of a string to lowercase\n   * @param {String} name\n   * @returns {String}\n   * @private\n   */\n  _processObjectName(name) {\n    return `${ name[0].toLowerCase() }${ name.slice(1) }`;\n  }\n}\n\nexport default Spy;"
  },
  {
    "__docId__": 160,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Spy",
    "memberof": "strip-types/src/test-framework/spy.js",
    "longname": "strip-types/src/test-framework/spy.js~Spy",
    "access": null,
    "export": true,
    "importPath": "@jobandtalent/nevada/strip-types/src/test-framework/spy.js",
    "importStyle": "Spy",
    "description": "The following module defines a Spy object used to intercept\noperations on object methods and properties.\n\nExample of usage:\n  ```javascript\n    import Spy from 'test-framework/spy';\n    const objectToSpy = { method: function() {} };\n    var spy = new Spy();\n    const spied = spy.watch(objectToSpy);\n    spied.method();\n    assert(spied.count === 1);\n    assert(spied.called === true);\n  ```\n\nIt adds a layer on top of the es6 `Proxy` object combined with Reflect API,\nthat way we can intercept method and property calls, both defined and undefined.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "Spy"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 161,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "strip-types/src/test-framework/spy.js~Spy",
    "longname": "strip-types/src/test-framework/spy.js~Spy#constructor",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 162,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_mockedObjectExtensions",
    "memberof": "strip-types/src/test-framework/spy.js~Spy",
    "longname": "strip-types/src/test-framework/spy.js~Spy#_mockedObjectExtensions",
    "access": "private",
    "description": "",
    "lineNumber": 38,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_originalObject",
    "memberof": "strip-types/src/test-framework/spy.js~Spy",
    "longname": "strip-types/src/test-framework/spy.js~Spy#_originalObject",
    "access": "private",
    "description": "",
    "lineNumber": 57,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_handler",
    "memberof": "strip-types/src/test-framework/spy.js~Spy",
    "longname": "strip-types/src/test-framework/spy.js~Spy#_handler",
    "access": "private",
    "description": "",
    "lineNumber": 62,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_spiedObjectsSet",
    "memberof": "strip-types/src/test-framework/spy.js~Spy",
    "longname": "strip-types/src/test-framework/spy.js~Spy#_spiedObjectsSet",
    "access": "private",
    "description": "",
    "lineNumber": 67,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "intercept",
    "memberof": "strip-types/src/test-framework/spy.js~Spy",
    "longname": "strip-types/src/test-framework/spy.js~Spy#intercept",
    "access": "public",
    "description": "",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "intercept"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "instance",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function",
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "stub",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 167,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "watched",
    "memberof": "strip-types/src/test-framework/spy.js~Spy",
    "longname": "strip-types/src/test-framework/spy.js~Spy#watched",
    "access": "public",
    "description": "Checks if a method is being watched",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "instance",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 168,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "restore",
    "memberof": "strip-types/src/test-framework/spy.js~Spy",
    "longname": "strip-types/src/test-framework/spy.js~Spy#restore",
    "access": "public",
    "description": "Removes the spy layer on an object's method",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProxyHandler"
        ],
        "spread": false,
        "optional": false,
        "name": "mock",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 169,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "watch",
    "memberof": "strip-types/src/test-framework/spy.js~Spy",
    "longname": "strip-types/src/test-framework/spy.js~Spy#watch",
    "access": "public",
    "description": "Watch an object methods and properties via a proxy",
    "lineNumber": 131,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Proxy}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "instance",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Proxy"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 170,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_handler",
    "memberof": "strip-types/src/test-framework/spy.js~Spy",
    "longname": "strip-types/src/test-framework/spy.js~Spy#_handler",
    "access": null,
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_initializeProxy",
    "memberof": "strip-types/src/test-framework/spy.js~Spy",
    "longname": "strip-types/src/test-framework/spy.js~Spy#_initializeProxy",
    "access": "private",
    "description": "Initializes a proxy object",
    "lineNumber": 144,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProxyHandler"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "proto",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 172,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_assertAndRegisterObjectOverride",
    "memberof": "strip-types/src/test-framework/spy.js~Spy",
    "longname": "strip-types/src/test-framework/spy.js~Spy#_assertAndRegisterObjectOverride",
    "access": "private",
    "description": "",
    "lineNumber": 159,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "instance",
        "description": ""
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Error"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 173,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "get",
    "memberof": "strip-types/src/test-framework/spy.js~Spy",
    "longname": "strip-types/src/test-framework/spy.js~Spy#get",
    "access": "public",
    "description": "",
    "lineNumber": 172,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object|null}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "null"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 174,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "mock",
    "memberof": "strip-types/src/test-framework/spy.js~Spy",
    "longname": "strip-types/src/test-framework/spy.js~Spy#mock",
    "access": "public",
    "description": "Creates a proxy object",
    "lineNumber": 184,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ProxyHandler}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "useModuleJS",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ProxyHandler"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 175,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_originalObject",
    "memberof": "strip-types/src/test-framework/spy.js~Spy",
    "longname": "strip-types/src/test-framework/spy.js~Spy#_originalObject",
    "access": null,
    "description": null,
    "lineNumber": 186,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_processObjectName",
    "memberof": "strip-types/src/test-framework/spy.js~Spy",
    "longname": "strip-types/src/test-framework/spy.js~Spy#_processObjectName",
    "access": "private",
    "description": "Converts the first character of a string to lowercase",
    "lineNumber": 222,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 177,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/test/bootstrap.js",
    "memberof": null,
    "longname": "strip-types/test/bootstrap.js",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "content": "/**\n * Bootstrap for core unit tests\n */\nimport 'coffee-script/register';"
  },
  {
    "__docId__": 178,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/test/javascript/component/base/test.base-controller-view.js",
    "memberof": null,
    "longname": "strip-types/test/javascript/component/base/test.base-controller-view.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nimport assert from 'assert';\nimport BaseControllerView from '../../../../src/javascript/component/base/base-controller-view';\nimport DOMUtil from '../../../../src/javascript/test-framework/dom-util';\nimport jsdom from 'mocha-jsdom';\nimport Spy from '../../../../src/javascript/test-framework/spy';\n\n/**\n * @test {BaseControllerView}\n */\ndescribe('BaseControllerView', () => {\n  // Initialize the fake DOM that jsdom exposes\n  jsdom();\n\n  /**\n   * @method constructDom\n   */\n  const constructDom = () => {\n    // Initialize the dom structure\n    const div = document.createElement('div');\n    div.id = 'button';\n    document.getElementsByTagName('body')[0].appendChild(div);\n  };\n\n  /**\n   * @method checkAugmentation\n   */\n  const checkAugmentation = (targetView, eventListenerMethod, eventDispatch) => {\n    const spy = new Spy();\n    spy.intercept(targetView, 'onLabelClick');\n    targetView._attachEvents();\n    assert.equal(targetView.onLabelClick.counter, 0);\n    eventDispatch();\n\n    assert.equal(targetView.onLabelClick.counter, 1);\n    targetView.onLabelClick.restore();\n  };\n\n  it('Gets augmented via EventActions', () => {\n    constructDom();\n    BaseControllerView.prototype.locators = {\n      label: {\n        id: '#button',\n        event: 'click'\n      }\n    };\n    BaseControllerView.prototype.onLabelClick = () => {};\n    const view = new BaseControllerView();\n\n    checkAugmentation(view, 'onLabelClick', () => DOMUtil.sendClickEvent('button'));\n  });\n\n  it('has a $ property', () => {\n    const baseView = new BaseControllerView();\n    assert.equal(typeof baseView.$, 'function');\n  });\n});"
  },
  {
    "__docId__": 179,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/test/javascript/component/base/test.base-controller.js",
    "memberof": null,
    "longname": "strip-types/test/javascript/component/base/test.base-controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nimport assert from 'assert';\nimport jsdom from 'mocha-jsdom';\nimport Spy from '../../../../src/javascript/test-framework/spy';\nimport BaseController from '../../../../src/javascript/component/base/base-controller';\nimport BaseControllerView from '../../../../src/javascript/component/base/base-controller-view';\nimport EventBus from '../../../../src/coffeescript/event_bus.coffee';\nimport DOMUtil from '../../../../src/javascript/test-framework/dom-util';\n\n/**\n * @test {BaseController}\n */\ndescribe('BaseController', () => {\n  // Initialize the DOM\n  jsdom();\n\n  afterEach(() => {\n    EventBus.clear();\n\n    if (typeof BaseController.prototype._getViewInstance.restore === 'function') {\n      BaseController.prototype._getViewInstance.restore();\n    }\n  });\n\n  /**\n   * Spies controller rendering logic\n   * @param {Boolean} render\n   * @param {Function} callback\n   * @private\n   */\n  const mockCustomView = (render, callback) => {\n    const spy = new Spy();\n    const mock = spy.mock(new BaseControllerView());\n    spy.intercept(BaseController.prototype, '_getViewInstance', () => mock);\n    const baseController = new BaseController({ render });\n    callback(spy, baseController);\n    spy.restore(mock);\n  };\n\n  it('A state id is generated', done => {\n    mockCustomView(true, spy => {\n      spy.intercept(Math, 'random', () => 0.1234);\n      const baseController = new BaseController();\n      assert.equal(Math.random.called, true);\n      assert.equal(typeof baseController._stateId, 'string');\n      assert.equal(baseController._stateId, 'BaseController0.1234');\n      Math.random.restore();\n      done();\n    });\n  });\n\n  it('With a document window a store is initialized', done => {\n    const baseController = new BaseController();\n    assert.equal(typeof baseController._store, 'object');\n    assert.equal(typeof baseController._store.subscribe, 'function');\n    assert.equal(typeof baseController._store.getState, 'function');\n    assert.equal(typeof baseController._store.replaceReducer, 'function');\n    done();\n  });\n\n  it('renders a view on initialization', done => {\n    mockCustomView(true, spy => {\n      assert.equal(spy.get('render').count, 1);\n      done();\n    });\n  });\n\n  it('doesn\\'t render a view on initialize', done => {\n    mockCustomView(false, spy => {\n      assert.equal(spy.get('render'), undefined);\n      done();\n    });\n  });\n\n  it('renders a view on demand', done => {\n    mockCustomView(false, (spy, baseController) => {\n      baseController.render();\n      assert.equal(spy.get('render').count, 1);\n      done();\n    });\n  });\n\n  it('generates properly a view name based on controller\\'s class name', done => {\n    const baseController = new BaseController({ render: false });\n    assert.equal(baseController._getViewImportName(), 'base-controller-view');\n    done();\n  });\n\n  it('has a view', () => {\n    const baseController = new BaseController();\n    const view = baseController.getView();\n    assert.equal(typeof view, 'object');\n  });\n\n  it('renders emits a renderBaseController event', done => {\n    EventBus.subscribe('renderBaseController', eventData => {\n      assert.notEqual(typeof eventData, 'undefined');\n      assert.equal(eventData.id, 'BaseController');\n      done();\n    });\n\n    const baseController = new BaseController(); // eslint-disable-line no-unused-vars\n  });\n\n  it('State changes are propagated', () => {\n    // Initialize the dom structure\n    const div = document.createElement('div');\n    div.id = 'button';\n    document.getElementsByTagName('body')[0].appendChild(div);\n\n    BaseControllerView.prototype.locators = {\n      show: {\n        id: '#button',\n        event: 'click'\n      }\n    };\n\n    const baseController = new BaseController();\n    baseController._view._controller = baseController;\n    DOMUtil.sendClickEvent('button');\n    const state = baseController._store.getState();\n    assert.equal(state[baseController._stateId].status, 'show');\n  });\n});"
  },
  {
    "__docId__": 180,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/test/javascript/component/base/test.event-actions.js",
    "memberof": null,
    "longname": "strip-types/test/javascript/component/base/test.event-actions.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nimport jsdom from 'mocha-jsdom';\nimport assert from 'assert';\nimport EventActions from '../../../../src/javascript/component/base/event-actions';\nimport Spy from '../../../../src/javascript/test-framework/spy';\nimport DOMUtil from '../../../../src/javascript/test-framework/dom-util';\nimport BaseControllerView from '../../../../src/javascript/component/base/base-controller-view';\n\n/**\n * @test {EventActions}\n */\ndescribe('EventActions', () => {\n  // Initialize the fake DOM that jsdom exposes\n  jsdom();\n\n  let view = null;\n\n  beforeEach(() => {\n    view = new BaseControllerView();\n    view.locators = {\n      Button: '#button'\n    };\n\n    view.onButtonClick = () => {};\n  });\n\n  afterEach(() => {\n    view = null;\n  });\n\n  /**\n   * @method constructDom\n   */\n  const constructDom = () => {\n    // Initialize the dom structure\n    const div = document.createElement('div');\n    div.id = 'button';\n    document.getElementsByTagName('body')[0].appendChild(div);\n  };\n\n  /**\n   * @method checkAugmentation\n   */\n  const checkAugmentation = (targetView, eventListenerMethod, eventDispatch) => {\n    const spy = new Spy();\n    const mockView = spy.mock(targetView);\n    constructDom();\n    assert.equal(spy.get('onButtonClick'), null);\n\n    const eventActions = new EventActions();\n    eventActions.augment(mockView);\n    eventDispatch();\n\n    assert.equal(spy.get(eventListenerMethod).count, 1);\n    spy.restore(mockView);\n  };\n\n  it('Returns proper event action names', () => {\n    const eventActions = new EventActions();\n    assert.equal(eventActions._getEventListenerName('click', 'Button'), 'onButtonClick');\n    assert.equal(eventActions._getEventListenerName('keypress', 'Label'), 'onLabelKeypress');\n    assert.equal(eventActions._getEventListenerName('keypress', 'label'), 'onLabelKeypress');\n  });\n\n  it('Augments views based on locators', () => {\n    checkAugmentation(view, 'onButtonClick', () => DOMUtil.sendClickEvent.bind(DOMUtil)('button'));\n  });\n\n  it('Augments views based on generic events', () => {\n    view.onResize = () => {};\n    checkAugmentation(view, 'onResize', DOMUtil.sendResizeEvent.bind(DOMUtil));\n  });\n\n  it('Clears event handlers', () => {\n    view.onButtonClick = () => {};\n\n    const spy = new Spy();\n    spy.intercept(view, 'onButtonClick');\n    constructDom();\n\n    const eventActions = new EventActions();\n    eventActions.augment(view);\n    DOMUtil.sendClickEvent('button');\n    assert.equal(view.onButtonClick.counter, 1);\n\n    eventActions.clear(view);\n    DOMUtil.sendClickEvent('button');\n    assert.equal(view.onButtonClick.counter, 1);\n    view.onButtonClick.restore();\n  });\n\n  it('Event handlers receive the event object', done => {\n    const eventActions = new EventActions();\n\n    view.onButtonClick = e => {\n      assert.equal(e instanceof Event, true);\n      assert.equal(e.isTrusted, false);\n      eventActions.clear(view);\n      done();\n    };\n\n    constructDom();\n\n    eventActions.augment(view);\n    DOMUtil.sendClickEvent('button');\n  });\n\n  it('Object locators receive the event object', done => {\n    view.locators = {\n      Button: {\n        id: '#button',\n        handler: e => {\n          assert.equal(e instanceof Event, true);\n          assert.equal(e.isTrusted, false);\n          done();\n        }\n      }\n    };\n\n    constructDom();\n\n    const eventActions = new EventActions();\n    eventActions.augment(view);\n\n    DOMUtil.sendClickEvent('button');\n  });\n\n  it('Translates locator object/strings', () => {\n    const eventActions = new EventActions();\n    assert.equal(eventActions._getLocatorString('test'), 'test');\n    assert.equal(eventActions._getLocatorString({ id: 'test' }), 'test');\n  });\n});"
  },
  {
    "__docId__": 181,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/test/javascript/polyfill/test.polyfill.js",
    "memberof": null,
    "longname": "strip-types/test/javascript/polyfill/test.polyfill.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nimport assert from 'assert';\nimport jsdom from 'mocha-jsdom';\n\n/**\n * @test {Polyfill}\n */\ndescribe('Polyfill', () => {\n  // Initialize the DOM\n  jsdom();\n\n  it('customEvent', () => {\n    window.CustomEvent = null;\n    assert.equal(window.CustomEvent, null);\n    require('../../../src/javascript/polyfill/custom-event');\n    assert.equal(typeof window.CustomEvent, 'function');\n  });\n\n  it('addEventListener', () => {\n    // addEventListener is already present in the test execution environments (browser and node), so the goal\n    // of this test is first of all to check that the polyfill does not break anything and the function still\n    // available after the polyfill is injected.\n    require('../../../src/javascript/polyfill/add-event-listener');\n    assert.equal(typeof window.addEventListener, 'function');\n  });\n});"
  },
  {
    "__docId__": 182,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/test/javascript/test-framework/test.dom-observer.js",
    "memberof": null,
    "longname": "strip-types/test/javascript/test-framework/test.dom-observer.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nimport jsdom from 'mocha-jsdom';\nimport assert from 'assert';\nimport DOMMutationFactory from '../../../src/javascript/test-framework/dom-mutation/factory';\n\n/**\n * @test {Mock}\n */\ndescribe('Mock', () => {\n  // Initialize the fake DOM that jsdom exposes\n  jsdom();\n\n  /**\n   * @type {Node|null} element\n   */\n  let element = null;\n\n  /**\n   * @type {domMutationFactory|null} observer\n   */\n  let domMutationObserver = null;\n\n  /**\n   * List of attributes we can query to the getMutationData method in a\n   * DOM mutation API observer.\n   *\n   * @type {Object} mutationAttributes\n   * @private\n   */\n  const mutationAttributes = ['type', 'removedNodes', 'attributes', 'characterData', 'childList', 'attributeName', 'newValue', 'oldValue'];\n\n  /**\n   * @method constructDom\n   * @private\n   */\n  const constructDom = () => {\n    // Initialize the dom structure\n    const div = document.createElement('div');\n    div.id = 'test';\n    div.setAttribute('test-attribute', 'old-value');\n    document.getElementsByTagName('body')[0].appendChild(div);\n    element = document.getElementById('test');\n  };\n\n  /**\n   * @param {Node} nodeElement\n   * @param {String} id\n   * @method insertChildNode\n   * @private\n   */\n  const insertChildNode = (nodeElement, id) => {\n    const newElement = document.createElement('div');\n    newElement.id = id;\n    nodeElement.appendChild(newElement);\n\n    return newElement;\n  };\n\n  /**\n   * Modifies a DOM element\n   * @method mutateDom\n   * @private\n   */\n  const mutateDom = () => {\n    element.setAttribute('test-attribute', 'new-value');\n  };\n\n  /**\n   * @method beforeEach\n   * @private\n   */\n  beforeEach(() => {\n    domMutationObserver = DOMMutationFactory.get();\n    constructDom();\n  });\n\n  /**\n   * @method afterEach\n   * @private\n   */\n  afterEach(() => {\n    domMutationObserver.restore();\n    document.body.removeChild(element);\n  });\n\n  /**\n   * @test {DomObserver#observe}\n   * @test {DomObserver#observer}\n   */\n  it('domMutation#observe throws error if trying to observe invalid element.', () => {\n    const throwAnException = function () {\n      domMutationObserver.observe(null);\n    };\n\n    assert.throws(throwAnException, Error);\n  });\n\n  /**\n   * @test {DomObserver#observe}\n   * @test {DomObserver#getMutationData}\n   */\n  it('domMutation#getMutationData with no mutation returns undefined for every attribute.', () => {\n    domMutationObserver.observe(element);\n    mutationAttributes.map(attributeKey => {\n      assert.equal(domMutationObserver.getMutationData(attributeKey), undefined);\n    });\n  });\n\n  /**\n   * @test {DomObserver#getMutationData}\n   */\n  it('domMutation#getMutationData with no observe and no mutation returns undefined attributes.', () => {\n    mutationAttributes.map(attributeKey => {\n      assert.equal(domMutationObserver.getMutationData(attributeKey), undefined);\n    });\n  });\n\n  /**\n   * @test {DomObserver#getMutationData}\n   */\n  it('domMutation#getMutationData with no observe returns undefined for every attribute.', () => {\n    mutationAttributes.map(attributeKey => {\n      assert.equal(domMutationObserver.getMutationData(attributeKey), undefined);\n    });\n  });\n\n  /**\n   * @test {DomObserver#getMutationData}\n   */\n  it('domMutation#getMutationData DOM mutation without observe returns undefined for attributes.', () => {\n    mutateDom();\n\n    mutationAttributes.map(attributeKey => {\n      assert.equal(domMutationObserver.getMutationData(attributeKey), undefined);\n    });\n  });\n\n  /**\n   * @test {DomObserver#observe}\n   * @test {DomObserver#getMutationData}\n   */\n  it('domMutation#isActive tracks properly if a DOM element is being observed', done => {\n    assert.equal(domMutationObserver.isActive(), false);\n    domMutationObserver.observe(element).then(() => {\n      assert.equal(domMutationObserver.isActive(), true);\n      done();\n    });\n\n    mutateDom();\n  });\n\n  /**\n   * @test {DomObserver#observe}\n   * @test {DomObserver#getMutationData}\n   */\n  it('domMutation#getMutationData DOM mutation in existing attribute is detected.', done => {\n    domMutationObserver.observe(element).then(() => {\n      assert.equal(domMutationObserver.getMutationData('type'), 'attributes');\n      assert.equal(domMutationObserver.getMutationData('newValue'), 'new-value');\n      assert.equal(domMutationObserver.getMutationData('oldValue'), 'old-value');\n      assert.equal(domMutationObserver.getMutationData('attributeName'), 'test-attribute');\n      done();\n    });\n\n    mutateDom();\n  });\n\n  /**\n   * @test {DomObserver#observe}\n   * @test {DomObserver#getMutationData}\n   */\n  it('domMutation#getMutationData DOM mutation in new attribute is detected.', done => {\n    const value = 'new-value-for-new-attribute';\n    domMutationObserver.observe(element).then(() => {\n      assert.equal(domMutationObserver.getMutationData('type'), 'attributes');\n      assert.equal(domMutationObserver.getMutationData('newValue'), value);\n      assert.equal(domMutationObserver.getMutationData('oldValue'), null);\n      done();\n    });\n\n    element.setAttribute('newAttribute', value);\n  });\n\n  /**\n   * @test {DomObserver#observe}\n   * @test {DomObserver#getMutationData}\n   */\n  it('domMutation#getMutationData DOM mutation adding a node.', done => {\n    const id = 'new-element-id';\n    domMutationObserver.observe(element).then(() => {\n      assert.equal(domMutationObserver.getMutationData('type'), 'childList');\n      assert.equal(domMutationObserver.getMutationData('element').id, id);\n      done();\n    });\n\n    insertChildNode(element, id);\n  });\n\n  /**\n   * @test {DomObserver#observe}\n   * @test {DomObserver#getMutationData}\n   */\n  it('domMutation#getMutationData DOM mutation removing a node.', done => {\n    const id = 'new-element-id';\n\n    // Start observing and now remove child element\n    domMutationObserver.observe(element).then(() => {\n      assert.equal(domMutationObserver.getMutationData('type'), 'childList');\n      assert.equal(domMutationObserver.getMutationData('element').id, id);\n      done();\n    });\n\n    const childNode = insertChildNode(element, id);\n    childNode.parentElement.removeChild(childNode);\n  });\n});"
  },
  {
    "__docId__": 183,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/test/javascript/test-framework/test.mock.js",
    "memberof": null,
    "longname": "strip-types/test/javascript/test-framework/test.mock.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nimport assert from 'assert';\nimport Mock from '../../../src/javascript/test-framework/mock.js';\n\n/**\n * @test {Mock}\n */\ndescribe('Mock', () => {\n  /**\n   * @type {Mock|null} mock\n   */\n  var mock = null;\n\n  /**\n   * @type {String} mockId\n   */\n  var mockId = 'mock-test';\n\n  /**\n   * @method beforeEach\n   * @private\n   */\n  beforeEach(() => {\n    mock = new Mock(mockId);\n  });\n\n  /**\n   * @method afterEach\n   * @private\n   */\n  afterEach(() => {\n    mock = null;\n  });\n\n  /**\n   * @test {Mock#attach}\n   */\n  it('#attach should inject a mock in the global scope', () => {\n    assert.equal(typeof global[mockId], 'undefined');\n\n    mock.attach();\n    assert.equal(typeof global[mockId], 'object');\n  });\n\n  /**\n   * @test {Mock#destroy}\n   */\n  it('#destroy should remove a mock from the global scope', () => {\n    mock.attach();\n    assert.equal(typeof global[mockId], 'object');\n\n    mock.destroy();\n    assert.equal(typeof global[mockId], 'undefined');\n  });\n\n  /**\n   * @test {Mock#get}\n   */\n  it('#get returns the mocked object', () => {\n    assert.equal(mock.mock, null);\n  });\n\n  /**\n   * @test {Mock#set}\n   */\n  it('#set sets the mocked object', () => {\n    mock.mock = {};\n    assert.equal(typeof mock.mock, 'object');\n  });\n});"
  },
  {
    "__docId__": 184,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/test/javascript/test-framework/test.modulejs.js",
    "memberof": null,
    "longname": "strip-types/test/javascript/test-framework/test.modulejs.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nconst assert = require('assert');\n\n/**\n * @test {ModuleJS}\n */\ndescribe('ModuleJS', () => {\n  /**\n   * @type {Object|null| ModuleJS\n   */\n  var ModuleJS = null;\n\n  class TestModule {\n    constructor() {\n      this.id = 'test';\n    }\n  }\n\n  /**\n   * @method beforeEach\n   * @private\n   */\n  beforeEach(() => {\n    ModuleJS = require('../../../src/javascript/test-framework/modulejs');\n    ModuleJS.attach();\n  });\n\n  /**\n   * @method afterEach\n   * @private\n   */\n  afterEach(() => {\n    ModuleJS = null;\n  });\n\n  /**\n   * @test {ModuleJS#attach}\n   */\n  it('#attach intercepts modulejs calls', () => {\n    assert.equal(typeof ModuleJS.getModule('Test'), 'undefined');\n    ModuleJS.mock.define('TestModule', () => TestModule);\n    assert.equal(typeof ModuleJS.getModule('Test'), 'function');\n  });\n\n  /**\n   * @test {ModuleJS#getModule}\n   */\n  it('#getModule returns the Module constructor', () => {\n    const Module = ModuleJS.getModule('Test');\n    const moduleObject = new Module();\n    assert.equal(moduleObject.id, 'test');\n  });\n});"
  },
  {
    "__docId__": 185,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "assert",
    "memberof": "strip-types/test/javascript/test-framework/test.modulejs.js",
    "longname": "strip-types/test/javascript/test-framework/test.modulejs.js~assert",
    "access": null,
    "export": false,
    "importPath": "@jobandtalent/nevada/strip-types/test/javascript/test-framework/test.modulejs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/test/javascript/test-framework/test.spy.js",
    "memberof": null,
    "longname": "strip-types/test/javascript/test-framework/test.spy.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nimport assert from 'assert';\nimport Spy from '../../../src/javascript/test-framework/spy';\nimport ModuleJS from '@lrsjng/modulejs';\n\n/**\n * @test {Spy}\n */\ndescribe('Spy', () => {\n  /**\n   * @type {Object} testObject\n   */\n  const testObject = {\n    property: 5,\n    method: () => {}\n  };\n\n  /**\n   * @type {Object|null} spied\n   */\n  let spied = null;\n\n  /**\n   * @type {Spy|null} spied\n   */\n  let spy = null;\n\n  /**\n   * @method beforeEach\n   * @private\n   */\n  beforeEach(() => {\n    spy = new Spy();\n    spied = spy.watch(testObject);\n  });\n\n  /**\n   * @method afterEach\n   * @private\n   */\n  afterEach(() => {\n    if (spy.watched(testObject, 'method')) {\n      testObject.method.restore();\n    }\n    spy = null;\n  });\n\n  /**\n   * @method assertSpyRegister\n   * @param {Spy} spyObject\n   * @param {String} property\n   * @param {Object} register\n   *   {Boolean} called\n   *   {Number} count\n   *   {Boolean} isDefined\n   */\n  const assertSpyRegister = function (spyObject, property, register) {\n    Object.keys(register).forEach(key => {\n      assert.equal(spyObject.get(property)[key], register[key]);\n    });\n  };\n\n  /**\n   * @test {Spy#watch}\n   */\n  it('#spy spied proxy preserves original values', () => {\n    assert.equal(spied.property, testObject.property);\n  });\n\n  /**\n   * @test {Spy#get}\n   */\n  it('#spy intercepts property sets', () => {\n    assert.equal(spy.get('property'), null);\n\n    spied.property = 'test';\n    assertSpyRegister(spy, 'property', { called: true, count: 1, isDefined: true });\n  });\n\n  /**\n   * @test {Spy#get}\n   */\n  it('#spy intercepts invalid property sets', () => {\n    spied.fake = 'test';\n    assertSpyRegister(spy, 'fake', { called: true, count: 1, isDefined: false });\n  });\n\n  /**\n   * @test {Spy#get}\n   */\n  it('#spy counts properly multiple property sets', () => {\n    assert.equal(spy.get('property'), null);\n\n    spied.property = 'test-1';\n    spied.property = 'test-2';\n    assertSpyRegister(spy, 'property', { count: 2 });\n  });\n\n  /**\n   * @test {Spy#get}\n   */\n  it('#spy intercepts property gets', () => {\n    const test = spied.property; // eslint-disable-line no-unused-vars\n    assertSpyRegister(spy, 'property', { called: true, count: 1, isDefined: true });\n  });\n\n  /**\n   * @test {Spy#get}\n   */\n  it('#spy intercepts multiple property sets', () => {\n    var test = spied.property; // eslint-disable-line no-unused-vars\n    test = spied.property;\n    assertSpyRegister(spy, 'property', { count: 2 });\n  });\n\n  /**\n   * @test {Spy#get}\n   */\n  it('#spy intercepts invalid property sets', () => {\n    const test = spied.fake; // eslint-disable-line no-unused-vars\n    assertSpyRegister(spy, 'fake', { called: true, count: 1, isDefined: false });\n  });\n\n  /**\n   * @test {Spy#get}\n   */\n  it('#spy intercepts method calls', () => {\n    assert.equal(spy.get('method'), null);\n\n    spied.method();\n    assertSpyRegister(spy, 'method', { called: true, count: 1, isDefined: true });\n  });\n\n  /**\n   * @test {Spy#get}\n   */\n  it('#spy intercepts multiple method calls', () => {\n    assert.equal(spy.get('method'), null);\n\n    spied.method();\n    spied.method();\n    assertSpyRegister(spy, 'method', { count: 2 });\n  });\n\n  /**\n   * @test {Spy#intercept}\n   */\n  it('#intercept overrides method calls', () => {\n    assert.equal(typeof testObject.method.called, 'undefined');\n    spy.intercept(testObject, 'method');\n    assert.notEqual(typeof testObject.method.called, 'undefined');\n    assert.equal(testObject.method.called, false);\n  });\n\n  /**\n   * @test {Spy#intercept}\n   */\n  it('#intercept registers method calls', () => {\n    spy.intercept(testObject, 'method');\n\n    testObject.method();\n    assert.equal(testObject.method.called, true);\n  });\n\n  /**\n   * @test {Spy#intercept}\n   */\n  it('#intercept counts method calls', () => {\n    spy.intercept(testObject, 'method');\n\n    assert.equal(testObject.method.counter, 0);\n\n    testObject.method();\n    assert.equal(testObject.method.counter, 1);\n\n    testObject.method();\n    assert.equal(testObject.method.counter, 2);\n  });\n\n  /**\n   * @test {Spy#intercept}\n   */\n  it('#intercept can receive stubs', () => {\n    const stub = () => 'test-result';\n    spy.intercept(testObject, 'method', stub);\n\n    assert.equal(testObject.method.counter, 0);\n\n    const result = testObject.method();\n    assert.equal(testObject.method.counter, 1);\n    assert.equal(result, 'test-result');\n  });\n\n  /**\n   * @test {Spy#watched}\n   */\n  it('#watched', () => {\n    assert.ok(!spy.watched(testObject, 'method'));\n    spy.intercept(testObject, 'method');\n    assert.ok(spy.watched(testObject, 'method'));\n    assert.equal(typeof testObject.method.called, 'boolean');\n  });\n\n  /**\n   * @test {Spy#restore}\n   */\n  it('#instance.method.restore', () => {\n    spy.intercept(testObject, 'method');\n    testObject.method.restore();\n    assert.ok(!spy.watched(testObject, 'method'));\n  });\n\n  /**\n   * @test {Spy#mock}\n   */\n  it('#mock can override modulejs modules', () => {\n    const obj = {\n      property: 5,\n      method: () => 'test-value'\n    };\n\n    spy.mock(obj, 'testObject', true);\n    const mockObject = ModuleJS.require('testObject');\n\n    mockObject.property = 6;\n    assert.equal(spy.get('property').called, true);\n    assert.equal(spy.get('property').count, 1);\n    assert.equal(spy.get('property').isDefined, true);\n\n    mockObject.propertyUnexistent = 6;\n    assert.equal(spy.get('propertyUnexistent').called, true);\n    assert.equal(spy.get('propertyUnexistent').count, 1);\n    assert.equal(spy.get('propertyUnexistent').isDefined, false);\n\n    spy.restore(obj);\n    const originalObject = ModuleJS.require('testObject');\n    assert.equal(spy.get('property'), null);\n    assert.equal(originalObject.property, 5);\n  });\n\n  /**\n   * @test {Spy#mock}\n   */\n  it('#mock can restore modulejs modules', () => {\n    const obj = {\n      property: 5,\n      method: () => 'test-value'\n    };\n\n    spy.mock(obj, 'testObject', true);\n    spy.restore(obj);\n\n    const originalObject = ModuleJS.require('testObject');\n    originalObject.property = 10;\n\n    assert.equal(spy.get('property'), null);\n  });\n});"
  },
  {
    "__docId__": 187,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/test/javascript/test.clone-object.js",
    "memberof": null,
    "longname": "strip-types/test/javascript/test.clone-object.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nimport assert from 'assert';\nimport CloneObject from '../../src/javascript/clone-object';\n\n/**\n * @test {CloneObject}\n */\ndescribe('CloneObject', () => {\n  const compareObjects = (sourceObject, clonedObject) => {\n    Object.keys(sourceObject).forEach(key => {\n      assert.notEqual(typeof clonedObject[key], 'undefined');\n      assert.equal(clonedObject[key], sourceObject[key]);\n    });\n  };\n\n  /**\n   * @test {CloneObject#clone}\n   */\n  it('Can clone objects', () => {\n    let clonedObject = CloneObject.clone({});\n    compareObjects({}, clonedObject);\n\n    const sourceObject = {\n      a: 1,\n      b: 2\n    };\n\n    clonedObject = CloneObject.clone(sourceObject);\n    compareObjects(sourceObject, clonedObject);\n  });\n\n  /**\n   * @test {CloneObject#cloneWithout}\n   */\n  it('Can clone objects properties conditionally', () => {\n    const sourceObject = {\n      a: 1,\n      b: 2\n    };\n\n    let clonedObject = CloneObject.cloneWithout(sourceObject, []);\n    assert.equal(clonedObject.a, sourceObject.a);\n    assert.equal(clonedObject.b, sourceObject.b);\n\n    clonedObject = CloneObject.cloneWithout(sourceObject, ['a']);\n    assert.equal(clonedObject.b, sourceObject.b);\n    assert.equal(typeof clonedObject.a, 'undefined');\n  });\n});"
  },
  {
    "__docId__": 188,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/test/javascript/test.cookie-storage.js",
    "memberof": null,
    "longname": "strip-types/test/javascript/test.cookie-storage.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nimport assert from 'assert';\nimport jsdom from 'mocha-jsdom';\nimport CookieStorage from '../../src/javascript/cookie-storage';\n\n/**\n * @test {CookieStorage}\n */\ndescribe('CookieStorage', () => {\n  // Initialize the fake DOM that jsdom exposes\n  jsdom();\n\n  beforeEach(() => {\n    CookieStorage.removeAll();\n  });\n\n  /**\n   * @test {CookieStorage#set}\n   */\n  it('Cookie values are set', () => {\n    CookieStorage.set('skip_top_bar_ad', 'true', 10);\n    assert.equal(document.cookie, 'skip_top_bar_ad=true');\n    CookieStorage.removeAll();\n\n    CookieStorage.set('last_session_within_one_day', 'yes', 5);\n    assert.equal(document.cookie, 'last_session_within_one_day=yes');\n    CookieStorage.removeAll();\n\n    CookieStorage.set('apply_to_job_opening_id', 5, 'session', { path: '/' });\n    assert.equal(document.cookie, 'apply_to_job_opening_id=5');\n  });\n\n  /**\n   * @test {CookieStorage#remove}\n   */\n  it('Cookies can be removed individually', () => {\n    CookieStorage.set('test', 'value');\n    assert.equal(document.cookie, 'test=value');\n    CookieStorage.remove('test1');\n    assert.equal(document.cookie, 'test=value');\n    CookieStorage.remove('test');\n    assert.equal(document.cookie, '');\n  });\n\n  /**\n   * @test {CookieStorage#removeAll}\n   */\n  it('Cookies can be removed globally', () => {\n    CookieStorage.set('test1', 'value1');\n    CookieStorage.set('test2', 'value2');\n    assert.equal(document.cookie, 'test1=value1; test2=value2');\n    CookieStorage.remove('test-invalid');\n    assert.equal(document.cookie, 'test1=value1; test2=value2');\n    CookieStorage.removeAll();\n    assert.equal(document.cookie, '');\n  });\n});"
  },
  {
    "__docId__": 189,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/test/javascript/test.emit-core-ready-event.js",
    "memberof": null,
    "longname": "strip-types/test/javascript/test.emit-core-ready-event.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import jsdom from 'mocha-jsdom';\n\n/**\n * @test {EventBus}\n */\ndescribe('emit-core-ready-event', () => {\n  // Initialize the fake DOM that jsdom exposes\n  jsdom();\n\n  /**\n   * @test {EventBus#subscribe}\n   * @test {EventBus#publish}\n   */\n  it('The event is emitted on file inclusion', done => {\n    window.addEventListener('jt-core-loaded', () => {\n      done();\n    });\n\n    require('../../src/javascript/emit-core-ready-event');\n  });\n});"
  },
  {
    "__docId__": 190,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/test/javascript/test.environment.js",
    "memberof": null,
    "longname": "strip-types/test/javascript/test.environment.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nimport assert from 'assert';\nimport Environment from '../../src/javascript/environment';\n\n/**\n * @test {Environment}\n */\ndescribe('Environment', () => {\n  /**\n   * @test {Environment#isDevelopment}\n   */\n  it('Environment is set to production by default', () => {\n    assert.equal(Environment.isDevelopment(), false);\n    assert.equal(Environment.environment, Environment.PRODUCTION);\n  });\n\n  /**\n   * @test {Environment#set}\n   */\n  it('The environment information can be set', () => {\n    assert.equal(Environment.isDevelopment(), false);\n    Environment.environment = Environment.DEVELOPMENT;\n    assert.equal(Environment.isDevelopment(), true);\n    assert.equal(Environment.environment, Environment.DEVELOPMENT);\n  });\n});"
  },
  {
    "__docId__": 191,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/test/javascript/test.erb-templating.js",
    "memberof": null,
    "longname": "strip-types/test/javascript/test.erb-templating.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nimport assert from 'assert';\nimport ERBTemplating from '../../src/javascript/erb-templating';\n\n/**\n * @test {ERBTemplating}\n */\ndescribe('ERBTemplating', () => {\n  /**\n   * @test {ERBTemplating#filter}\n   */\n  it('Filter individual strings', () => {\n    assert.equal(ERBTemplating.filter('<%= t(\"cookie_consent.find_out_more\") %>'), 'Find Out More');\n    assert.equal(ERBTemplating.filter('<%= t(\"cookie_consent.cookies_explanation\") %>'), 'Cookies Explanation');\n    assert.equal(ERBTemplating.filter('<%= link_to t(\"cookie_consent.find_out_more\"), cookies_path, target: \"_blank\" %>'), '<a href=\"cookies_path\" target=\"_blank\">Find Out More</a>');\n    assert.equal(ERBTemplating.filter('<%= NO MATCH %>'), 'NO MATCH');\n  });\n\n  /**\n   * @test {ERBTemplating#filter}\n   */\n  it('Filter templates with multiple matches', () => {\n    const template = `<p class=\"landing_cookie_explanation\">\n      <%= t(\"cookie_consent.cookies_explanation\") %>\n      <%= t(\"cookie_consent.cookies_extra\") %>\n      <%= link_to t(\"cookie_consent.find_out_more\"), cookies_path, target: \"_blank\" %>\n    </p>`;\n\n    const expected = `<p class=\"landing_cookie_explanation\">\n      Cookies Explanation\n      Cookies Extra\n      <a href=\"cookies_path\" target=\"_blank\">Find Out More</a>\n    </p>`;\n    assert.equal(ERBTemplating.filter(template), expected);\n  });\n\n  /**\n   * @test {ERBTemplating#_replaceMatches}\n   */\n  it('Replacing placeholders with matches', () => {\n    assert.equal(ERBTemplating._replaceMatches('[1]', ['test']), 'test');\n    assert.equal(ERBTemplating._replaceMatches('<a href=\"[1]\">[2]</a>', ['href', 'text']), '<a href=\"href\">text</a>');\n  });\n});"
  },
  {
    "__docId__": 192,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/test/javascript/test.event-bus.js",
    "memberof": null,
    "longname": "strip-types/test/javascript/test.event-bus.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import assert from 'assert';\nimport EventBus from '../../src/coffeescript/event_bus.coffee';\n\n/**\n * @test {EventBus}\n */\ndescribe('EventBus', () => {\n  afterEach(() => {\n    EventBus.clear();\n  });\n\n  /**\n   * @test {EventBus#subscribe}\n   * @test {EventBus#publish}\n   */\n  it('#subscribe listeners can subscribe to events', done => {\n    const eventHandler = function (data) {\n      assert.equal(typeof data, 'undefined');\n      done();\n    };\n\n    EventBus.subscribe('testEvent', eventHandler);\n    EventBus.publish('testEvent');\n  });\n\n  /**\n   * @test {EventBus#subscribe}\n   * @test {EventBus#publish}\n   */\n  it('#subscribe listeners receive events data', done => {\n    const eventHandler = function (data) {\n      assert.notEqual(typeof data, 'undefined');\n      assert.equal(data.test, 'value');\n      done();\n    };\n\n    EventBus.subscribe('testEvent', eventHandler);\n    EventBus.publish('testEvent', { test: 'value' });\n  });\n});"
  },
  {
    "__docId__": 193,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "strip-types/test/javascript/test.logger.js",
    "memberof": null,
    "longname": "strip-types/test/javascript/test.logger.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import assert from 'assert';\nimport Logger from '../../src/coffeescript/logger.coffee';\nimport Spy from '../../src/javascript/test-framework/spy';\n\n/**\n * @test {Logger}\n */\ndescribe('Logger', () => {\n  /**\n   * @type {Logger|null} logger\n   */\n  let logger = null;\n\n  /**\n   * @method beforeEach\n   * @private\n   */\n  beforeEach(() => {\n    if (typeof global.window === 'undefined') {\n      global.window = {};\n    }\n    logger = new Logger();\n  });\n\n  /**\n   * @method afterEach\n   * @private\n   */\n  afterEach(() => {\n    logger = null;\n  });\n\n  /**\n   * @test {Logger#debug}\n   * @test {Logger#info}\n   * @test {Logger#warn}\n   * @test {Logger#error}\n   */\n  it('#debug #info #warn #error trigger console calls', () => {\n    const ref = console;\n    const spy = new Spy();\n    const mock = spy.mock(console);\n\n    const logMethods = ['debug', 'info', 'warn', 'error'];\n    logMethods.map(currentMethod => {\n      logger[currentMethod]('test');\n    });\n\n    assert.equal(spy.get('log').count, logMethods.length);\n    spy.restore(mock, ref);\n  });\n});"
  },
  {
    "__docId__": 195,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 196,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 197,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 198,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 199,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 200,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 201,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 202,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 203,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 204,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 205,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 206,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 207,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 208,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 209,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 210,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 211,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 212,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 213,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 214,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 215,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 216,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 217,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 218,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 219,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 220,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 221,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 222,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 223,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 224,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 225,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 226,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 227,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 228,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 229,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 230,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 231,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 232,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 233,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 234,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 235,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 236,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 237,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 238,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 239,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 240,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 241,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 243,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 244,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 245,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 246,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 247,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 248,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 249,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 250,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 251,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/bootstrap.js",
    "memberof": null,
    "longname": "test/bootstrap.js",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "content": "/**\n * Bootstrap for core unit tests\n */\nimport 'coffee-script/register';\n"
  },
  {
    "__docId__": 252,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/javascript/component/base/test.base-controller-view.js",
    "memberof": null,
    "longname": "test/javascript/component/base/test.base-controller-view.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nimport assert from 'assert';\nimport BaseControllerView from '../../../../src/javascript/component/base/base-controller-view';\nimport DOMUtil from '../../../../src/javascript/test-framework/dom-util';\nimport jsdom from 'mocha-jsdom';\nimport Spy from '../../../../src/javascript/test-framework/spy';\n\n/**\n * @test {BaseControllerView}\n */\ndescribe('BaseControllerView', () => {\n  // Initialize the fake DOM that jsdom exposes\n  jsdom();\n\n  /**\n   * @method constructDom\n   */\n  const constructDom = () => {\n    // Initialize the dom structure\n    const div = document.createElement('div');\n    div.id = 'button';\n    document.getElementsByTagName('body')[0].appendChild(div);\n  };\n\n  /**\n   * @method checkAugmentation\n   */\n  const checkAugmentation = (targetView, eventListenerMethod, eventDispatch) => {\n    const spy = new Spy();\n    spy.intercept(targetView, 'onLabelClick');\n    targetView._attachEvents();\n    assert.equal(targetView.onLabelClick.counter, 0);\n    eventDispatch();\n\n    assert.equal(targetView.onLabelClick.counter, 1);\n    targetView.onLabelClick.restore();\n  };\n\n  it('Gets augmented via EventActions', () => {\n    constructDom();\n    BaseControllerView.prototype.locators = {\n      label: {\n        id: '#button',\n        event: 'click'\n      }\n    };\n    BaseControllerView.prototype.onLabelClick = () => {};\n    const view = new BaseControllerView();\n\n    checkAugmentation(view, 'onLabelClick', () => DOMUtil.sendClickEvent('button'));\n  });\n\n  it('has a $ property', () => {\n    const baseView = new BaseControllerView();\n    assert.equal(typeof baseView.$, 'function');\n  });\n});\n"
  },
  {
    "__docId__": 253,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe0",
    "testId": 0,
    "memberof": "test/javascript/component/base/test.base-controller-view.js",
    "testDepth": 0,
    "longname": "test/javascript/component/base/test.base-controller-view.js~describe0",
    "access": null,
    "description": "BaseControllerView",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{BaseControllerView}"
      }
    ],
    "testTargets": [
      "BaseControllerView"
    ]
  },
  {
    "__docId__": 254,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it1",
    "testId": 1,
    "memberof": "test/javascript/component/base/test.base-controller-view.js~describe0",
    "testDepth": 1,
    "longname": "test/javascript/component/base/test.base-controller-view.js~describe0.it1",
    "access": null,
    "description": "Gets augmented via EventActions",
    "lineNumber": 40
  },
  {
    "__docId__": 255,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it2",
    "testId": 2,
    "memberof": "test/javascript/component/base/test.base-controller-view.js~describe0",
    "testDepth": 1,
    "longname": "test/javascript/component/base/test.base-controller-view.js~describe0.it2",
    "access": null,
    "description": "has a $ property",
    "lineNumber": 54
  },
  {
    "__docId__": 256,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/javascript/component/base/test.base-controller.js",
    "memberof": null,
    "longname": "test/javascript/component/base/test.base-controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nimport assert from 'assert';\nimport jsdom from 'mocha-jsdom';\nimport Spy from '../../../../src/javascript/test-framework/spy';\nimport BaseController from '../../../../src/javascript/component/base/base-controller';\nimport BaseControllerView from '../../../../src/javascript/component/base/base-controller-view';\nimport EventBus from '../../../../src/coffeescript/event_bus.coffee';\nimport DOMUtil from '../../../../src/javascript/test-framework/dom-util';\n\n/**\n * @test {BaseController}\n */\ndescribe('BaseController', () => {\n  // Initialize the DOM\n  jsdom();\n\n  afterEach(() => {\n    EventBus.clear();\n\n    if (typeof BaseController.prototype._getViewInstance.restore === 'function') {\n      BaseController.prototype._getViewInstance.restore();\n    }\n  });\n\n  /**\n   * Spies controller rendering logic\n   * @param {Boolean} render\n   * @param {Function} callback\n   * @private\n   */\n  const mockCustomView = (render, callback) => {\n    const spy = new Spy();\n    const mock = spy.mock(new BaseControllerView());\n    spy.intercept(BaseController.prototype, '_getViewInstance', () => mock);\n    const baseController = new BaseController({ render });\n    callback(spy, baseController);\n    spy.restore(mock);\n  };\n\n  it('A state id is generated', (done) => {\n    mockCustomView(true, (spy) => {\n      spy.intercept(Math, 'random', () => 0.1234);\n      const baseController = new BaseController();\n      assert.equal(Math.random.called, true);\n      assert.equal(typeof baseController._stateId, 'string');\n      assert.equal(baseController._stateId, 'BaseController0.1234');\n      Math.random.restore();\n      done();\n    });\n  });\n\n  it('With a document window a store is initialized', (done) => {\n    const baseController = new BaseController();\n    assert.equal(typeof baseController._store, 'object');\n    assert.equal(typeof baseController._store.subscribe, 'function');\n    assert.equal(typeof baseController._store.getState, 'function');\n    assert.equal(typeof baseController._store.replaceReducer, 'function');\n    done();\n  });\n\n  it('renders a view on initialization', (done) => {\n    mockCustomView(true, (spy) => {\n      assert.equal(spy.get('render').count, 1);\n      done();\n    });\n  });\n\n  it('doesn\\'t render a view on initialize', (done) => {\n    mockCustomView(false, (spy) => {\n      assert.equal(spy.get('render'), undefined);\n      done();\n    });\n  });\n\n  it('renders a view on demand', (done) => {\n    mockCustomView(false, (spy, baseController) => {\n      baseController.render();\n      assert.equal(spy.get('render').count, 1);\n      done();\n    });\n  });\n\n  it('generates properly a view name based on controller\\'s class name', (done) => {\n    const baseController = new BaseController({ render: false });\n    assert.equal(baseController._getViewImportName(), 'base-controller-view');\n    done();\n  });\n\n  it('has a view', () => {\n    const baseController = new BaseController();\n    const view = baseController.getView();\n    assert.equal(typeof view, 'object');\n  });\n\n  it('renders emits a renderBaseController event', (done) => {\n    EventBus.subscribe('renderBaseController', (eventData) => {\n      assert.notEqual(typeof eventData, 'undefined');\n      assert.equal(eventData.id, 'BaseController');\n      done();\n    });\n\n    const baseController = new BaseController(); // eslint-disable-line no-unused-vars\n  });\n\n  it('State changes are propagated', () => {\n    // Initialize the dom structure\n    const div = document.createElement('div');\n    div.id = 'button';\n    document.getElementsByTagName('body')[0].appendChild(div);\n\n    BaseControllerView.prototype.locators = {\n      show: {\n        id: '#button',\n        event: 'click'\n      }\n    };\n\n    const baseController = new BaseController();\n    baseController._view._controller = baseController;\n    DOMUtil.sendClickEvent('button');\n    const state = baseController._store.getState();\n    assert.equal(state[baseController._stateId].status, 'show');\n  });\n});\n"
  },
  {
    "__docId__": 257,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe3",
    "testId": 3,
    "memberof": "test/javascript/component/base/test.base-controller.js",
    "testDepth": 0,
    "longname": "test/javascript/component/base/test.base-controller.js~describe3",
    "access": null,
    "description": "BaseController",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{BaseController}"
      }
    ],
    "testTargets": [
      "BaseController"
    ]
  },
  {
    "__docId__": 258,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it4",
    "testId": 4,
    "memberof": "test/javascript/component/base/test.base-controller.js~describe3",
    "testDepth": 1,
    "longname": "test/javascript/component/base/test.base-controller.js~describe3.it4",
    "access": null,
    "description": "A state id is generated",
    "lineNumber": 41
  },
  {
    "__docId__": 259,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it5",
    "testId": 5,
    "memberof": "test/javascript/component/base/test.base-controller.js~describe3",
    "testDepth": 1,
    "longname": "test/javascript/component/base/test.base-controller.js~describe3.it5",
    "access": null,
    "description": "With a document window a store is initialized",
    "lineNumber": 53
  },
  {
    "__docId__": 260,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it6",
    "testId": 6,
    "memberof": "test/javascript/component/base/test.base-controller.js~describe3",
    "testDepth": 1,
    "longname": "test/javascript/component/base/test.base-controller.js~describe3.it6",
    "access": null,
    "description": "renders a view on initialization",
    "lineNumber": 62
  },
  {
    "__docId__": 261,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it7",
    "testId": 7,
    "memberof": "test/javascript/component/base/test.base-controller.js~describe3",
    "testDepth": 1,
    "longname": "test/javascript/component/base/test.base-controller.js~describe3.it7",
    "access": null,
    "description": "doesn't render a view on initialize",
    "lineNumber": 69
  },
  {
    "__docId__": 262,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it8",
    "testId": 8,
    "memberof": "test/javascript/component/base/test.base-controller.js~describe3",
    "testDepth": 1,
    "longname": "test/javascript/component/base/test.base-controller.js~describe3.it8",
    "access": null,
    "description": "renders a view on demand",
    "lineNumber": 76
  },
  {
    "__docId__": 263,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it9",
    "testId": 9,
    "memberof": "test/javascript/component/base/test.base-controller.js~describe3",
    "testDepth": 1,
    "longname": "test/javascript/component/base/test.base-controller.js~describe3.it9",
    "access": null,
    "description": "generates properly a view name based on controller's class name",
    "lineNumber": 84
  },
  {
    "__docId__": 264,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it10",
    "testId": 10,
    "memberof": "test/javascript/component/base/test.base-controller.js~describe3",
    "testDepth": 1,
    "longname": "test/javascript/component/base/test.base-controller.js~describe3.it10",
    "access": null,
    "description": "has a view",
    "lineNumber": 90
  },
  {
    "__docId__": 265,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it11",
    "testId": 11,
    "memberof": "test/javascript/component/base/test.base-controller.js~describe3",
    "testDepth": 1,
    "longname": "test/javascript/component/base/test.base-controller.js~describe3.it11",
    "access": null,
    "description": "renders emits a renderBaseController event",
    "lineNumber": 96
  },
  {
    "__docId__": 266,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it12",
    "testId": 12,
    "memberof": "test/javascript/component/base/test.base-controller.js~describe3",
    "testDepth": 1,
    "longname": "test/javascript/component/base/test.base-controller.js~describe3.it12",
    "access": null,
    "description": "State changes are propagated",
    "lineNumber": 106
  },
  {
    "__docId__": 267,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/javascript/component/base/test.event-actions.js",
    "memberof": null,
    "longname": "test/javascript/component/base/test.event-actions.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nimport jsdom from 'mocha-jsdom';\nimport assert from 'assert';\nimport EventActions from '../../../../src/javascript/component/base/event-actions';\nimport Spy from '../../../../src/javascript/test-framework/spy';\nimport DOMUtil from '../../../../src/javascript/test-framework/dom-util';\nimport BaseControllerView from '../../../../src/javascript/component/base/base-controller-view';\n\n/**\n * @test {EventActions}\n */\ndescribe('EventActions', () => {\n  // Initialize the fake DOM that jsdom exposes\n  jsdom();\n\n  let view = null;\n\n  beforeEach(() => {\n    view = new BaseControllerView();\n    view.locators = {\n      Button: '#button'\n    };\n\n    view.onButtonClick = () => {};\n  });\n\n  afterEach(() => {\n    view = null;\n  });\n\n  /**\n   * @method constructDom\n   */\n  const constructDom = () => {\n    // Initialize the dom structure\n    const div = document.createElement('div');\n    div.id = 'button';\n    document.getElementsByTagName('body')[0].appendChild(div);\n  };\n\n  /**\n   * @method checkAugmentation\n   */\n  const checkAugmentation = (targetView, eventListenerMethod, eventDispatch) => {\n    const spy = new Spy();\n    const mockView = spy.mock(targetView);\n    constructDom();\n    assert.equal(spy.get('onButtonClick'), null);\n\n    const eventActions = new EventActions();\n    eventActions.augment(mockView);\n    eventDispatch();\n\n    assert.equal(spy.get(eventListenerMethod).count, 1);\n    spy.restore(mockView);\n  };\n\n  it('Returns proper event action names', () => {\n    const eventActions = new EventActions();\n    assert.equal(eventActions._getEventListenerName('click', 'Button'), 'onButtonClick');\n    assert.equal(eventActions._getEventListenerName('keypress', 'Label'), 'onLabelKeypress');\n    assert.equal(eventActions._getEventListenerName('keypress', 'label'), 'onLabelKeypress');\n  });\n\n  it('Augments views based on locators', () => {\n    checkAugmentation(view, 'onButtonClick', () => DOMUtil.sendClickEvent.bind(DOMUtil)('button'));\n  });\n\n  it('Augments views based on generic events', () => {\n    view.onResize = () => {};\n    checkAugmentation(view, 'onResize', DOMUtil.sendResizeEvent.bind(DOMUtil));\n  });\n\n  it('Clears event handlers', () => {\n    view.onButtonClick = () => {};\n\n    const spy = new Spy();\n    spy.intercept(view, 'onButtonClick');\n    constructDom();\n\n    const eventActions = new EventActions();\n    eventActions.augment(view);\n    DOMUtil.sendClickEvent('button');\n    assert.equal(view.onButtonClick.counter, 1);\n\n    eventActions.clear(view);\n    DOMUtil.sendClickEvent('button');\n    assert.equal(view.onButtonClick.counter, 1);\n    view.onButtonClick.restore();\n  });\n\n  it('Event handlers receive the event object', (done) => {\n    const eventActions = new EventActions();\n\n    view.onButtonClick = (e) => {\n      assert.equal(e instanceof Event, true);\n      assert.equal(e.isTrusted, false);\n      eventActions.clear(view);\n      done();\n    };\n\n    constructDom();\n\n    eventActions.augment(view);\n    DOMUtil.sendClickEvent('button');\n  });\n\n  it('Object locators receive the event object', (done) => {\n    view.locators = {\n      Button: {\n        id: '#button',\n        handler: (e) => {\n          assert.equal(e instanceof Event, true);\n          assert.equal(e.isTrusted, false);\n          done();\n        }\n      }\n    };\n\n    constructDom();\n\n    const eventActions = new EventActions();\n    eventActions.augment(view);\n\n    DOMUtil.sendClickEvent('button');\n  });\n\n  it('Translates locator object/strings', () => {\n    const eventActions = new EventActions();\n    assert.equal(eventActions._getLocatorString('test'), 'test');\n    assert.equal(eventActions._getLocatorString({ id: 'test' }), 'test');\n  });\n});\n"
  },
  {
    "__docId__": 268,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe13",
    "testId": 13,
    "memberof": "test/javascript/component/base/test.event-actions.js",
    "testDepth": 0,
    "longname": "test/javascript/component/base/test.event-actions.js~describe13",
    "access": null,
    "description": "EventActions",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{EventActions}"
      }
    ],
    "testTargets": [
      "EventActions"
    ]
  },
  {
    "__docId__": 269,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it14",
    "testId": 14,
    "memberof": "test/javascript/component/base/test.event-actions.js~describe13",
    "testDepth": 1,
    "longname": "test/javascript/component/base/test.event-actions.js~describe13.it14",
    "access": null,
    "description": "Returns proper event action names",
    "lineNumber": 59
  },
  {
    "__docId__": 270,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it15",
    "testId": 15,
    "memberof": "test/javascript/component/base/test.event-actions.js~describe13",
    "testDepth": 1,
    "longname": "test/javascript/component/base/test.event-actions.js~describe13.it15",
    "access": null,
    "description": "Augments views based on locators",
    "lineNumber": 66
  },
  {
    "__docId__": 271,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it16",
    "testId": 16,
    "memberof": "test/javascript/component/base/test.event-actions.js~describe13",
    "testDepth": 1,
    "longname": "test/javascript/component/base/test.event-actions.js~describe13.it16",
    "access": null,
    "description": "Augments views based on generic events",
    "lineNumber": 70
  },
  {
    "__docId__": 272,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it17",
    "testId": 17,
    "memberof": "test/javascript/component/base/test.event-actions.js~describe13",
    "testDepth": 1,
    "longname": "test/javascript/component/base/test.event-actions.js~describe13.it17",
    "access": null,
    "description": "Clears event handlers",
    "lineNumber": 75
  },
  {
    "__docId__": 273,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it18",
    "testId": 18,
    "memberof": "test/javascript/component/base/test.event-actions.js~describe13",
    "testDepth": 1,
    "longname": "test/javascript/component/base/test.event-actions.js~describe13.it18",
    "access": null,
    "description": "Event handlers receive the event object",
    "lineNumber": 93
  },
  {
    "__docId__": 274,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it19",
    "testId": 19,
    "memberof": "test/javascript/component/base/test.event-actions.js~describe13",
    "testDepth": 1,
    "longname": "test/javascript/component/base/test.event-actions.js~describe13.it19",
    "access": null,
    "description": "Object locators receive the event object",
    "lineNumber": 109
  },
  {
    "__docId__": 275,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it20",
    "testId": 20,
    "memberof": "test/javascript/component/base/test.event-actions.js~describe13",
    "testDepth": 1,
    "longname": "test/javascript/component/base/test.event-actions.js~describe13.it20",
    "access": null,
    "description": "Translates locator object/strings",
    "lineNumber": 129
  },
  {
    "__docId__": 276,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/javascript/polyfill/test.polyfill.js",
    "memberof": null,
    "longname": "test/javascript/polyfill/test.polyfill.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nimport assert from 'assert';\nimport jsdom from 'mocha-jsdom';\n\n/**\n * @test {Polyfill}\n */\ndescribe('Polyfill', () => {\n  // Initialize the DOM\n  jsdom();\n\n  it('customEvent', () => {\n    window.CustomEvent = null;\n    assert.equal(window.CustomEvent, null);\n    require('../../../src/javascript/polyfill/custom-event');\n    assert.equal(typeof window.CustomEvent, 'function');\n  });\n\n  it('addEventListener', () => {\n    // addEventListener is already present in the test execution environments (browser and node), so the goal\n    // of this test is first of all to check that the polyfill does not break anything and the function still\n    // available after the polyfill is injected.\n    require('../../../src/javascript/polyfill/add-event-listener');\n    assert.equal(typeof window.addEventListener, 'function');\n  });\n});\n"
  },
  {
    "__docId__": 277,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe21",
    "testId": 21,
    "memberof": "test/javascript/polyfill/test.polyfill.js",
    "testDepth": 0,
    "longname": "test/javascript/polyfill/test.polyfill.js~describe21",
    "access": null,
    "description": "Polyfill",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Polyfill}"
      }
    ],
    "testTargets": [
      "Polyfill"
    ]
  },
  {
    "__docId__": 278,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it22",
    "testId": 22,
    "memberof": "test/javascript/polyfill/test.polyfill.js~describe21",
    "testDepth": 1,
    "longname": "test/javascript/polyfill/test.polyfill.js~describe21.it22",
    "access": null,
    "description": "customEvent",
    "lineNumber": 13
  },
  {
    "__docId__": 279,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it23",
    "testId": 23,
    "memberof": "test/javascript/polyfill/test.polyfill.js~describe21",
    "testDepth": 1,
    "longname": "test/javascript/polyfill/test.polyfill.js~describe21.it23",
    "access": null,
    "description": "addEventListener",
    "lineNumber": 20
  },
  {
    "__docId__": 280,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/javascript/test-framework/test.dom-observer.js",
    "memberof": null,
    "longname": "test/javascript/test-framework/test.dom-observer.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nimport jsdom from 'mocha-jsdom';\nimport assert from 'assert';\nimport DOMMutationFactory from '../../../src/javascript/test-framework/dom-mutation/factory';\n\n/**\n * @test {Mock}\n */\ndescribe('Mock', () => {\n  // Initialize the fake DOM that jsdom exposes\n  jsdom();\n\n  /**\n   * @type {Node|null} element\n   */\n  let element = null;\n\n  /**\n   * @type {domMutationFactory|null} observer\n   */\n  let domMutationObserver = null;\n\n  /**\n   * List of attributes we can query to the getMutationData method in a\n   * DOM mutation API observer.\n   *\n   * @type {Object} mutationAttributes\n   * @private\n   */\n  const mutationAttributes = [\n    'type',\n    'removedNodes',\n    'attributes',\n    'characterData',\n    'childList',\n    'attributeName',\n    'newValue',\n    'oldValue'\n  ];\n\n  /**\n   * @method constructDom\n   * @private\n   */\n  const constructDom = () => {\n    // Initialize the dom structure\n    const div = document.createElement('div');\n    div.id = 'test';\n    div.setAttribute('test-attribute', 'old-value');\n    document.getElementsByTagName('body')[0].appendChild(div);\n    element = document.getElementById('test');\n  };\n\n  /**\n   * @param {Node} nodeElement\n   * @param {String} id\n   * @method insertChildNode\n   * @private\n   */\n  const insertChildNode = (nodeElement, id) => {\n    const newElement = document.createElement('div');\n    newElement.id = id;\n    nodeElement.appendChild(newElement);\n\n    return newElement;\n  };\n\n  /**\n   * Modifies a DOM element\n   * @method mutateDom\n   * @private\n   */\n  const mutateDom = () => {\n    element.setAttribute('test-attribute', 'new-value');\n  };\n\n  /**\n   * @method beforeEach\n   * @private\n   */\n  beforeEach(() => {\n    domMutationObserver = DOMMutationFactory.get();\n    constructDom();\n  });\n\n  /**\n   * @method afterEach\n   * @private\n   */\n  afterEach(() => {\n    domMutationObserver.restore();\n    document.body.removeChild(element);\n  });\n\n  /**\n   * @test {DomObserver#observe}\n   * @test {DomObserver#observer}\n   */\n  it('domMutation#observe throws error if trying to observe invalid element.', () => {\n    const throwAnException = function() {\n      domMutationObserver.observe(null);\n    };\n\n    assert.throws(throwAnException, Error);\n  });\n\n  /**\n   * @test {DomObserver#observe}\n   * @test {DomObserver#getMutationData}\n   */\n  it('domMutation#getMutationData with no mutation returns undefined for every attribute.', () => {\n    domMutationObserver.observe(element);\n    mutationAttributes.map((attributeKey) => {\n      assert.equal(domMutationObserver.getMutationData(attributeKey), undefined);\n    });\n  });\n\n  /**\n   * @test {DomObserver#getMutationData}\n   */\n  it('domMutation#getMutationData with no observe and no mutation returns undefined attributes.', () => {\n    mutationAttributes.map((attributeKey) => {\n      assert.equal(domMutationObserver.getMutationData(attributeKey), undefined);\n    });\n  });\n\n  /**\n   * @test {DomObserver#getMutationData}\n   */\n  it('domMutation#getMutationData with no observe returns undefined for every attribute.', () => {\n    mutationAttributes.map((attributeKey) => {\n      assert.equal(domMutationObserver.getMutationData(attributeKey), undefined);\n    });\n  });\n\n  /**\n   * @test {DomObserver#getMutationData}\n   */\n  it('domMutation#getMutationData DOM mutation without observe returns undefined for attributes.', () => {\n    mutateDom();\n\n    mutationAttributes.map((attributeKey) => {\n      assert.equal(domMutationObserver.getMutationData(attributeKey), undefined);\n    });\n  });\n\n  /**\n   * @test {DomObserver#observe}\n   * @test {DomObserver#getMutationData}\n   */\n  it('domMutation#isActive tracks properly if a DOM element is being observed', (done) => {\n    assert.equal(domMutationObserver.isActive(), false);\n    domMutationObserver.observe(element).then(() => {\n      assert.equal(domMutationObserver.isActive(), true);\n      done();\n    });\n\n    mutateDom();\n  });\n\n  /**\n   * @test {DomObserver#observe}\n   * @test {DomObserver#getMutationData}\n   */\n  it('domMutation#getMutationData DOM mutation in existing attribute is detected.', (done) => {\n    domMutationObserver.observe(element).then(() => {\n      assert.equal(domMutationObserver.getMutationData('type'), 'attributes');\n      assert.equal(domMutationObserver.getMutationData('newValue'), 'new-value');\n      assert.equal(domMutationObserver.getMutationData('oldValue'), 'old-value');\n      assert.equal(domMutationObserver.getMutationData('attributeName'), 'test-attribute');\n      done();\n    });\n\n    mutateDom();\n  });\n\n  /**\n   * @test {DomObserver#observe}\n   * @test {DomObserver#getMutationData}\n   */\n  it('domMutation#getMutationData DOM mutation in new attribute is detected.', (done) => {\n    const value = 'new-value-for-new-attribute';\n    domMutationObserver.observe(element).then(() => {\n      assert.equal(domMutationObserver.getMutationData('type'), 'attributes');\n      assert.equal(domMutationObserver.getMutationData('newValue'), value);\n      assert.equal(domMutationObserver.getMutationData('oldValue'), null);\n      done();\n    });\n\n    element.setAttribute('newAttribute', value);\n  });\n\n  /**\n   * @test {DomObserver#observe}\n   * @test {DomObserver#getMutationData}\n   */\n  it('domMutation#getMutationData DOM mutation adding a node.', (done) => {\n    const id = 'new-element-id';\n    domMutationObserver.observe(element).then(() => {\n      assert.equal(domMutationObserver.getMutationData('type'), 'childList');\n      assert.equal(domMutationObserver.getMutationData('element').id, id);\n      done();\n    });\n\n    insertChildNode(element, id);\n  });\n\n  /**\n   * @test {DomObserver#observe}\n   * @test {DomObserver#getMutationData}\n   */\n  it('domMutation#getMutationData DOM mutation removing a node.', (done) => {\n    const id = 'new-element-id';\n\n    // Start observing and now remove child element\n    domMutationObserver.observe(element).then(() => {\n      assert.equal(domMutationObserver.getMutationData('type'), 'childList');\n      assert.equal(domMutationObserver.getMutationData('element').id, id);\n      done();\n    });\n\n    const childNode = insertChildNode(element, id);\n    childNode.parentElement.removeChild(childNode);\n  });\n});\n"
  },
  {
    "__docId__": 281,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe24",
    "testId": 24,
    "memberof": "test/javascript/test-framework/test.dom-observer.js",
    "testDepth": 0,
    "longname": "test/javascript/test-framework/test.dom-observer.js~describe24",
    "access": null,
    "description": "Mock",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Mock}"
      }
    ],
    "testTargets": [
      "Mock"
    ]
  },
  {
    "__docId__": 282,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it25",
    "testId": 25,
    "memberof": "test/javascript/test-framework/test.dom-observer.js~describe24",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.dom-observer.js~describe24.it25",
    "access": null,
    "description": "domMutation#observe throws error if trying to observe invalid element.",
    "lineNumber": 100,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DomObserver#observe}"
      },
      {
        "tagName": "@test",
        "tagValue": "{DomObserver#observer}"
      }
    ],
    "testTargets": [
      "DomObserver#observe",
      "DomObserver#observer"
    ]
  },
  {
    "__docId__": 283,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it26",
    "testId": 26,
    "memberof": "test/javascript/test-framework/test.dom-observer.js~describe24",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.dom-observer.js~describe24.it26",
    "access": null,
    "description": "domMutation#getMutationData with no mutation returns undefined for every attribute.",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DomObserver#observe}"
      },
      {
        "tagName": "@test",
        "tagValue": "{DomObserver#getMutationData}"
      }
    ],
    "testTargets": [
      "DomObserver#observe",
      "DomObserver#getMutationData"
    ]
  },
  {
    "__docId__": 284,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it27",
    "testId": 27,
    "memberof": "test/javascript/test-framework/test.dom-observer.js~describe24",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.dom-observer.js~describe24.it27",
    "access": null,
    "description": "domMutation#getMutationData with no observe and no mutation returns undefined attributes.",
    "lineNumber": 122,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DomObserver#getMutationData}"
      }
    ],
    "testTargets": [
      "DomObserver#getMutationData"
    ]
  },
  {
    "__docId__": 285,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it28",
    "testId": 28,
    "memberof": "test/javascript/test-framework/test.dom-observer.js~describe24",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.dom-observer.js~describe24.it28",
    "access": null,
    "description": "domMutation#getMutationData with no observe returns undefined for every attribute.",
    "lineNumber": 131,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DomObserver#getMutationData}"
      }
    ],
    "testTargets": [
      "DomObserver#getMutationData"
    ]
  },
  {
    "__docId__": 286,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it29",
    "testId": 29,
    "memberof": "test/javascript/test-framework/test.dom-observer.js~describe24",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.dom-observer.js~describe24.it29",
    "access": null,
    "description": "domMutation#getMutationData DOM mutation without observe returns undefined for attributes.",
    "lineNumber": 140,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DomObserver#getMutationData}"
      }
    ],
    "testTargets": [
      "DomObserver#getMutationData"
    ]
  },
  {
    "__docId__": 287,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it30",
    "testId": 30,
    "memberof": "test/javascript/test-framework/test.dom-observer.js~describe24",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.dom-observer.js~describe24.it30",
    "access": null,
    "description": "domMutation#isActive tracks properly if a DOM element is being observed",
    "lineNumber": 152,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DomObserver#observe}"
      },
      {
        "tagName": "@test",
        "tagValue": "{DomObserver#getMutationData}"
      }
    ],
    "testTargets": [
      "DomObserver#observe",
      "DomObserver#getMutationData"
    ]
  },
  {
    "__docId__": 288,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it31",
    "testId": 31,
    "memberof": "test/javascript/test-framework/test.dom-observer.js~describe24",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.dom-observer.js~describe24.it31",
    "access": null,
    "description": "domMutation#getMutationData DOM mutation in existing attribute is detected.",
    "lineNumber": 166,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DomObserver#observe}"
      },
      {
        "tagName": "@test",
        "tagValue": "{DomObserver#getMutationData}"
      }
    ],
    "testTargets": [
      "DomObserver#observe",
      "DomObserver#getMutationData"
    ]
  },
  {
    "__docId__": 289,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it32",
    "testId": 32,
    "memberof": "test/javascript/test-framework/test.dom-observer.js~describe24",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.dom-observer.js~describe24.it32",
    "access": null,
    "description": "domMutation#getMutationData DOM mutation in new attribute is detected.",
    "lineNumber": 182,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DomObserver#observe}"
      },
      {
        "tagName": "@test",
        "tagValue": "{DomObserver#getMutationData}"
      }
    ],
    "testTargets": [
      "DomObserver#observe",
      "DomObserver#getMutationData"
    ]
  },
  {
    "__docId__": 290,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it33",
    "testId": 33,
    "memberof": "test/javascript/test-framework/test.dom-observer.js~describe24",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.dom-observer.js~describe24.it33",
    "access": null,
    "description": "domMutation#getMutationData DOM mutation adding a node.",
    "lineNumber": 198,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DomObserver#observe}"
      },
      {
        "tagName": "@test",
        "tagValue": "{DomObserver#getMutationData}"
      }
    ],
    "testTargets": [
      "DomObserver#observe",
      "DomObserver#getMutationData"
    ]
  },
  {
    "__docId__": 291,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it34",
    "testId": 34,
    "memberof": "test/javascript/test-framework/test.dom-observer.js~describe24",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.dom-observer.js~describe24.it34",
    "access": null,
    "description": "domMutation#getMutationData DOM mutation removing a node.",
    "lineNumber": 213,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DomObserver#observe}"
      },
      {
        "tagName": "@test",
        "tagValue": "{DomObserver#getMutationData}"
      }
    ],
    "testTargets": [
      "DomObserver#observe",
      "DomObserver#getMutationData"
    ]
  },
  {
    "__docId__": 292,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/javascript/test-framework/test.mock.js",
    "memberof": null,
    "longname": "test/javascript/test-framework/test.mock.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nimport assert from 'assert';\nimport Mock from '../../../src/javascript/test-framework/mock.js';\n\n/**\n * @test {Mock}\n */\ndescribe('Mock', () => {\n  /**\n   * @type {Mock|null} mock\n   */\n  var mock = null;\n\n  /**\n   * @type {String} mockId\n   */\n  var mockId = 'mock-test';\n\n  /**\n   * @method beforeEach\n   * @private\n   */\n  beforeEach(() => {\n    mock = new Mock(mockId);\n  });\n\n  /**\n   * @method afterEach\n   * @private\n   */\n  afterEach(() => {\n    mock = null;\n  });\n\n  /**\n   * @test {Mock#attach}\n   */\n  it('#attach should inject a mock in the global scope', () => {\n    assert.equal(typeof global[mockId], 'undefined');\n\n    mock.attach();\n    assert.equal(typeof global[mockId], 'object');\n  });\n\n  /**\n   * @test {Mock#destroy}\n   */\n  it('#destroy should remove a mock from the global scope', () => {\n    mock.attach();\n    assert.equal(typeof global[mockId], 'object');\n\n    mock.destroy();\n    assert.equal(typeof global[mockId], 'undefined');\n  });\n\n  /**\n   * @test {Mock#get}\n   */\n  it('#get returns the mocked object', () => {\n    assert.equal(mock.mock, null);\n  });\n\n  /**\n   * @test {Mock#set}\n   */\n  it('#set sets the mocked object', () => {\n    mock.mock = {};\n    assert.equal(typeof mock.mock, 'object');\n  });\n});\n"
  },
  {
    "__docId__": 293,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe35",
    "testId": 35,
    "memberof": "test/javascript/test-framework/test.mock.js",
    "testDepth": 0,
    "longname": "test/javascript/test-framework/test.mock.js~describe35",
    "access": null,
    "description": "Mock",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Mock}"
      }
    ],
    "testTargets": [
      "Mock"
    ]
  },
  {
    "__docId__": 294,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it36",
    "testId": 36,
    "memberof": "test/javascript/test-framework/test.mock.js~describe35",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.mock.js~describe35.it36",
    "access": null,
    "description": "#attach should inject a mock in the global scope",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Mock#attach}"
      }
    ],
    "testTargets": [
      "Mock#attach"
    ]
  },
  {
    "__docId__": 295,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it37",
    "testId": 37,
    "memberof": "test/javascript/test-framework/test.mock.js~describe35",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.mock.js~describe35.it37",
    "access": null,
    "description": "#destroy should remove a mock from the global scope",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Mock#destroy}"
      }
    ],
    "testTargets": [
      "Mock#destroy"
    ]
  },
  {
    "__docId__": 296,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it38",
    "testId": 38,
    "memberof": "test/javascript/test-framework/test.mock.js~describe35",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.mock.js~describe35.it38",
    "access": null,
    "description": "#get returns the mocked object",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Mock#get}"
      }
    ],
    "testTargets": [
      "Mock#get"
    ]
  },
  {
    "__docId__": 297,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it39",
    "testId": 39,
    "memberof": "test/javascript/test-framework/test.mock.js~describe35",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.mock.js~describe35.it39",
    "access": null,
    "description": "#set sets the mocked object",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Mock#set}"
      }
    ],
    "testTargets": [
      "Mock#set"
    ]
  },
  {
    "__docId__": 298,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/javascript/test-framework/test.modulejs.js",
    "memberof": null,
    "longname": "test/javascript/test-framework/test.modulejs.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nconst assert = require('assert');\n\n/**\n * @test {ModuleJS}\n */\ndescribe('ModuleJS', () => {\n  /**\n   * @type {Object|null| ModuleJS\n   */\n  var ModuleJS = null;\n\n  class TestModule {\n    constructor() {\n      this.id = 'test';\n    }\n  }\n\n  /**\n   * @method beforeEach\n   * @private\n   */\n  beforeEach(() => {\n    ModuleJS = require('../../../src/javascript/test-framework/modulejs');\n    ModuleJS.attach();\n  });\n\n  /**\n   * @method afterEach\n   * @private\n   */\n  afterEach(() => {\n    ModuleJS = null;\n  });\n\n  /**\n   * @test {ModuleJS#attach}\n   */\n  it('#attach intercepts modulejs calls', () => {\n    assert.equal(typeof ModuleJS.getModule('Test'), 'undefined');\n    ModuleJS.mock.define('TestModule', () => TestModule);\n    assert.equal(typeof ModuleJS.getModule('Test'), 'function');\n  });\n\n  /**\n   * @test {ModuleJS#getModule}\n   */\n  it('#getModule returns the Module constructor', () => {\n    const Module = ModuleJS.getModule('Test');\n    const moduleObject = new Module();\n    assert.equal(moduleObject.id, 'test');\n  });\n});\n"
  },
  {
    "__docId__": 299,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe40",
    "testId": 40,
    "memberof": "test/javascript/test-framework/test.modulejs.js",
    "testDepth": 0,
    "longname": "test/javascript/test-framework/test.modulejs.js~describe40",
    "access": null,
    "description": "ModuleJS",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ModuleJS}"
      }
    ],
    "testTargets": [
      "ModuleJS"
    ]
  },
  {
    "__docId__": 300,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it41",
    "testId": 41,
    "memberof": "test/javascript/test-framework/test.modulejs.js~describe40",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.modulejs.js~describe40.it41",
    "access": null,
    "description": "#attach intercepts modulejs calls",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ModuleJS#attach}"
      }
    ],
    "testTargets": [
      "ModuleJS#attach"
    ]
  },
  {
    "__docId__": 301,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it42",
    "testId": 42,
    "memberof": "test/javascript/test-framework/test.modulejs.js~describe40",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.modulejs.js~describe40.it42",
    "access": null,
    "description": "#getModule returns the Module constructor",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ModuleJS#getModule}"
      }
    ],
    "testTargets": [
      "ModuleJS#getModule"
    ]
  },
  {
    "__docId__": 302,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/javascript/test-framework/test.spy.js",
    "memberof": null,
    "longname": "test/javascript/test-framework/test.spy.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nimport assert from 'assert';\nimport Spy from '../../../src/javascript/test-framework/spy';\nimport ModuleJS from '@lrsjng/modulejs';\n\n/**\n * @test {Spy}\n */\ndescribe('Spy', () => {\n  /**\n   * @type {Object} testObject\n   */\n  const testObject = {\n    property: 5,\n    method: () => {}\n  };\n\n  /**\n   * @type {Object|null} spied\n   */\n  let spied = null;\n\n  /**\n   * @type {Spy|null} spied\n   */\n  let spy = null;\n\n  /**\n   * @method beforeEach\n   * @private\n   */\n  beforeEach(() => {\n    spy = new Spy();\n    spied = spy.watch(testObject);\n  });\n\n  /**\n   * @method afterEach\n   * @private\n   */\n  afterEach(() => {\n    if (spy.watched(testObject, 'method')) {\n      testObject.method.restore();\n    }\n    spy = null;\n  });\n\n  /**\n   * @method assertSpyRegister\n   * @param {Spy} spyObject\n   * @param {String} property\n   * @param {Object} register\n   *   {Boolean} called\n   *   {Number} count\n   *   {Boolean} isDefined\n   */\n  const assertSpyRegister = function(spyObject, property, register) {\n    Object.keys(register).forEach((key) => {\n      assert.equal(spyObject.get(property)[key], register[key]);\n    });\n  };\n\n  /**\n   * @test {Spy#watch}\n   */\n  it('#spy spied proxy preserves original values', () => {\n    assert.equal(spied.property, testObject.property);\n  });\n\n  /**\n   * @test {Spy#get}\n   */\n  it('#spy intercepts property sets', () => {\n    assert.equal(spy.get('property'), null);\n\n    spied.property = 'test';\n    assertSpyRegister(spy, 'property', { called: true, count: 1, isDefined: true });\n  });\n\n  /**\n   * @test {Spy#get}\n   */\n  it('#spy intercepts invalid property sets', () => {\n    spied.fake = 'test';\n    assertSpyRegister(spy, 'fake', { called: true, count: 1, isDefined: false });\n  });\n\n  /**\n   * @test {Spy#get}\n   */\n  it('#spy counts properly multiple property sets', () => {\n    assert.equal(spy.get('property'), null);\n\n    spied.property = 'test-1';\n    spied.property = 'test-2';\n    assertSpyRegister(spy, 'property', { count: 2 });\n  });\n\n  /**\n   * @test {Spy#get}\n   */\n  it('#spy intercepts property gets', () => {\n    const test = spied.property; // eslint-disable-line no-unused-vars\n    assertSpyRegister(spy, 'property', { called: true, count: 1, isDefined: true });\n  });\n\n  /**\n   * @test {Spy#get}\n   */\n  it('#spy intercepts multiple property sets', () => {\n    var test = spied.property; // eslint-disable-line no-unused-vars\n    test = spied.property;\n    assertSpyRegister(spy, 'property', { count: 2 });\n  });\n\n  /**\n   * @test {Spy#get}\n   */\n  it('#spy intercepts invalid property sets', () => {\n    const test = spied.fake; // eslint-disable-line no-unused-vars\n    assertSpyRegister(spy, 'fake', { called: true, count: 1, isDefined: false });\n  });\n\n  /**\n   * @test {Spy#get}\n   */\n  it('#spy intercepts method calls', () => {\n    assert.equal(spy.get('method'), null);\n\n    spied.method();\n    assertSpyRegister(spy, 'method', { called: true, count: 1, isDefined: true });\n  });\n\n  /**\n   * @test {Spy#get}\n   */\n  it('#spy intercepts multiple method calls', () => {\n    assert.equal(spy.get('method'), null);\n\n    spied.method();\n    spied.method();\n    assertSpyRegister(spy, 'method', { count: 2 });\n  });\n\n  /**\n   * @test {Spy#intercept}\n   */\n  it('#intercept overrides method calls', () => {\n    assert.equal(typeof testObject.method.called, 'undefined');\n    spy.intercept(testObject, 'method');\n    assert.notEqual(typeof testObject.method.called, 'undefined');\n    assert.equal(testObject.method.called, false);\n  });\n\n  /**\n   * @test {Spy#intercept}\n   */\n  it('#intercept registers method calls', () => {\n    spy.intercept(testObject, 'method');\n\n    testObject.method();\n    assert.equal(testObject.method.called, true);\n  });\n\n  /**\n   * @test {Spy#intercept}\n   */\n  it('#intercept counts method calls', () => {\n    spy.intercept(testObject, 'method');\n\n    assert.equal(testObject.method.counter, 0);\n\n    testObject.method();\n    assert.equal(testObject.method.counter, 1);\n\n    testObject.method();\n    assert.equal(testObject.method.counter, 2);\n  });\n\n  /**\n   * @test {Spy#intercept}\n   */\n  it('#intercept can receive stubs', () => {\n    const stub = () => 'test-result';\n    spy.intercept(testObject, 'method', stub);\n\n    assert.equal(testObject.method.counter, 0);\n\n    const result = testObject.method();\n    assert.equal(testObject.method.counter, 1);\n    assert.equal(result, 'test-result');\n  });\n\n  /**\n   * @test {Spy#watched}\n   */\n  it('#watched', () => {\n    assert.ok(!spy.watched(testObject, 'method'));\n    spy.intercept(testObject, 'method');\n    assert.ok(spy.watched(testObject, 'method'));\n    assert.equal(typeof testObject.method.called, 'boolean');\n  });\n\n  /**\n   * @test {Spy#restore}\n   */\n  it('#instance.method.restore', () => {\n    spy.intercept(testObject, 'method');\n    testObject.method.restore();\n    assert.ok(!spy.watched(testObject, 'method'));\n  });\n\n  /**\n   * @test {Spy#mock}\n   */\n  it('#mock can override modulejs modules', () => {\n    const obj = {\n      property: 5,\n      method: () => 'test-value'\n    };\n\n    spy.mock(obj, 'testObject', true);\n    const mockObject = ModuleJS.require('testObject');\n\n    mockObject.property = 6;\n    assert.equal(spy.get('property').called, true);\n    assert.equal(spy.get('property').count, 1);\n    assert.equal(spy.get('property').isDefined, true);\n\n    mockObject.propertyUnexistent = 6;\n    assert.equal(spy.get('propertyUnexistent').called, true);\n    assert.equal(spy.get('propertyUnexistent').count, 1);\n    assert.equal(spy.get('propertyUnexistent').isDefined, false);\n\n    spy.restore(obj);\n    const originalObject = ModuleJS.require('testObject');\n    assert.equal(spy.get('property'), null);\n    assert.equal(originalObject.property, 5);\n  });\n\n  /**\n   * @test {Spy#mock}\n   */\n  it('#mock can restore modulejs modules', () => {\n    const obj = {\n      property: 5,\n      method: () => 'test-value'\n    };\n\n    spy.mock(obj, 'testObject', true);\n    spy.restore(obj);\n\n    const originalObject = ModuleJS.require('testObject');\n    originalObject.property = 10;\n\n    assert.equal(spy.get('property'), null);\n  });\n});\n"
  },
  {
    "__docId__": 303,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe43",
    "testId": 43,
    "memberof": "test/javascript/test-framework/test.spy.js",
    "testDepth": 0,
    "longname": "test/javascript/test-framework/test.spy.js~describe43",
    "access": null,
    "description": "Spy",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Spy}"
      }
    ],
    "testTargets": [
      "Spy"
    ]
  },
  {
    "__docId__": 304,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it44",
    "testId": 44,
    "memberof": "test/javascript/test-framework/test.spy.js~describe43",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.spy.js~describe43.it44",
    "access": null,
    "description": "#spy spied proxy preserves original values",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Spy#watch}"
      }
    ],
    "testTargets": [
      "Spy#watch"
    ]
  },
  {
    "__docId__": 305,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it45",
    "testId": 45,
    "memberof": "test/javascript/test-framework/test.spy.js~describe43",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.spy.js~describe43.it45",
    "access": null,
    "description": "#spy intercepts property sets",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Spy#get}"
      }
    ],
    "testTargets": [
      "Spy#get"
    ]
  },
  {
    "__docId__": 306,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it46",
    "testId": 46,
    "memberof": "test/javascript/test-framework/test.spy.js~describe43",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.spy.js~describe43.it46",
    "access": null,
    "description": "#spy intercepts invalid property sets",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Spy#get}"
      }
    ],
    "testTargets": [
      "Spy#get"
    ]
  },
  {
    "__docId__": 307,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it47",
    "testId": 47,
    "memberof": "test/javascript/test-framework/test.spy.js~describe43",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.spy.js~describe43.it47",
    "access": null,
    "description": "#spy counts properly multiple property sets",
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Spy#get}"
      }
    ],
    "testTargets": [
      "Spy#get"
    ]
  },
  {
    "__docId__": 308,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it48",
    "testId": 48,
    "memberof": "test/javascript/test-framework/test.spy.js~describe43",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.spy.js~describe43.it48",
    "access": null,
    "description": "#spy intercepts property gets",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Spy#get}"
      }
    ],
    "testTargets": [
      "Spy#get"
    ]
  },
  {
    "__docId__": 309,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it49",
    "testId": 49,
    "memberof": "test/javascript/test-framework/test.spy.js~describe43",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.spy.js~describe43.it49",
    "access": null,
    "description": "#spy intercepts multiple property sets",
    "lineNumber": 111,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Spy#get}"
      }
    ],
    "testTargets": [
      "Spy#get"
    ]
  },
  {
    "__docId__": 310,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it50",
    "testId": 50,
    "memberof": "test/javascript/test-framework/test.spy.js~describe43",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.spy.js~describe43.it50",
    "access": null,
    "description": "#spy intercepts invalid property sets",
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Spy#get}"
      }
    ],
    "testTargets": [
      "Spy#get"
    ]
  },
  {
    "__docId__": 311,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it51",
    "testId": 51,
    "memberof": "test/javascript/test-framework/test.spy.js~describe43",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.spy.js~describe43.it51",
    "access": null,
    "description": "#spy intercepts method calls",
    "lineNumber": 128,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Spy#get}"
      }
    ],
    "testTargets": [
      "Spy#get"
    ]
  },
  {
    "__docId__": 312,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it52",
    "testId": 52,
    "memberof": "test/javascript/test-framework/test.spy.js~describe43",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.spy.js~describe43.it52",
    "access": null,
    "description": "#spy intercepts multiple method calls",
    "lineNumber": 138,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Spy#get}"
      }
    ],
    "testTargets": [
      "Spy#get"
    ]
  },
  {
    "__docId__": 313,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it53",
    "testId": 53,
    "memberof": "test/javascript/test-framework/test.spy.js~describe43",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.spy.js~describe43.it53",
    "access": null,
    "description": "#intercept overrides method calls",
    "lineNumber": 149,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Spy#intercept}"
      }
    ],
    "testTargets": [
      "Spy#intercept"
    ]
  },
  {
    "__docId__": 314,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it54",
    "testId": 54,
    "memberof": "test/javascript/test-framework/test.spy.js~describe43",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.spy.js~describe43.it54",
    "access": null,
    "description": "#intercept registers method calls",
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Spy#intercept}"
      }
    ],
    "testTargets": [
      "Spy#intercept"
    ]
  },
  {
    "__docId__": 315,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it55",
    "testId": 55,
    "memberof": "test/javascript/test-framework/test.spy.js~describe43",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.spy.js~describe43.it55",
    "access": null,
    "description": "#intercept counts method calls",
    "lineNumber": 169,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Spy#intercept}"
      }
    ],
    "testTargets": [
      "Spy#intercept"
    ]
  },
  {
    "__docId__": 316,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it56",
    "testId": 56,
    "memberof": "test/javascript/test-framework/test.spy.js~describe43",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.spy.js~describe43.it56",
    "access": null,
    "description": "#intercept can receive stubs",
    "lineNumber": 184,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Spy#intercept}"
      }
    ],
    "testTargets": [
      "Spy#intercept"
    ]
  },
  {
    "__docId__": 317,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it57",
    "testId": 57,
    "memberof": "test/javascript/test-framework/test.spy.js~describe43",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.spy.js~describe43.it57",
    "access": null,
    "description": "#watched",
    "lineNumber": 198,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Spy#watched}"
      }
    ],
    "testTargets": [
      "Spy#watched"
    ]
  },
  {
    "__docId__": 318,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it58",
    "testId": 58,
    "memberof": "test/javascript/test-framework/test.spy.js~describe43",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.spy.js~describe43.it58",
    "access": null,
    "description": "#instance.method.restore",
    "lineNumber": 208,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Spy#restore}"
      }
    ],
    "testTargets": [
      "Spy#restore"
    ]
  },
  {
    "__docId__": 319,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it59",
    "testId": 59,
    "memberof": "test/javascript/test-framework/test.spy.js~describe43",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.spy.js~describe43.it59",
    "access": null,
    "description": "#mock can override modulejs modules",
    "lineNumber": 217,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Spy#mock}"
      }
    ],
    "testTargets": [
      "Spy#mock"
    ]
  },
  {
    "__docId__": 320,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it60",
    "testId": 60,
    "memberof": "test/javascript/test-framework/test.spy.js~describe43",
    "testDepth": 1,
    "longname": "test/javascript/test-framework/test.spy.js~describe43.it60",
    "access": null,
    "description": "#mock can restore modulejs modules",
    "lineNumber": 245,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Spy#mock}"
      }
    ],
    "testTargets": [
      "Spy#mock"
    ]
  },
  {
    "__docId__": 321,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/javascript/test.clone-object.js",
    "memberof": null,
    "longname": "test/javascript/test.clone-object.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nimport assert from 'assert';\nimport CloneObject from '../../src/javascript/clone-object';\n\n/**\n * @test {CloneObject}\n */\ndescribe('CloneObject', () => {\n  const compareObjects = (sourceObject, clonedObject) => {\n    Object.keys(sourceObject).forEach((key) => {\n      assert.notEqual(typeof clonedObject[key], 'undefined');\n      assert.equal(clonedObject[key], sourceObject[key]);\n    });\n  };\n\n  /**\n   * @test {CloneObject#clone}\n   */\n  it('Can clone objects', () => {\n    let clonedObject = CloneObject.clone({});\n    compareObjects({}, clonedObject);\n\n    const sourceObject = {\n      a: 1,\n      b: 2\n    };\n\n    clonedObject = CloneObject.clone(sourceObject);\n    compareObjects(sourceObject, clonedObject);\n  });\n\n  /**\n   * @test {CloneObject#cloneWithout}\n   */\n  it('Can clone objects properties conditionally', () => {\n    const sourceObject = {\n      a: 1,\n      b: 2\n    };\n\n    let clonedObject = CloneObject.cloneWithout(sourceObject, []);\n    assert.equal(clonedObject.a, sourceObject.a);\n    assert.equal(clonedObject.b, sourceObject.b);\n\n    clonedObject = CloneObject.cloneWithout(sourceObject, ['a']);\n    assert.equal(clonedObject.b, sourceObject.b);\n    assert.equal(typeof clonedObject.a, 'undefined');\n  });\n});\n"
  },
  {
    "__docId__": 322,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe61",
    "testId": 61,
    "memberof": "test/javascript/test.clone-object.js",
    "testDepth": 0,
    "longname": "test/javascript/test.clone-object.js~describe61",
    "access": null,
    "description": "CloneObject",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{CloneObject}"
      }
    ],
    "testTargets": [
      "CloneObject"
    ]
  },
  {
    "__docId__": 323,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it62",
    "testId": 62,
    "memberof": "test/javascript/test.clone-object.js~describe61",
    "testDepth": 1,
    "longname": "test/javascript/test.clone-object.js~describe61.it62",
    "access": null,
    "description": "Can clone objects",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{CloneObject#clone}"
      }
    ],
    "testTargets": [
      "CloneObject#clone"
    ]
  },
  {
    "__docId__": 324,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it63",
    "testId": 63,
    "memberof": "test/javascript/test.clone-object.js~describe61",
    "testDepth": 1,
    "longname": "test/javascript/test.clone-object.js~describe61.it63",
    "access": null,
    "description": "Can clone objects properties conditionally",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{CloneObject#cloneWithout}"
      }
    ],
    "testTargets": [
      "CloneObject#cloneWithout"
    ]
  },
  {
    "__docId__": 325,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/javascript/test.cookie-storage.js",
    "memberof": null,
    "longname": "test/javascript/test.cookie-storage.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nimport assert from 'assert';\nimport jsdom from 'mocha-jsdom';\nimport CookieStorage from '../../src/javascript/cookie-storage';\n\n/**\n * @test {CookieStorage}\n */\ndescribe('CookieStorage', () => {\n  // Initialize the fake DOM that jsdom exposes\n  jsdom();\n\n  beforeEach(() => {\n    CookieStorage.removeAll();\n  });\n\n  /**\n   * @test {CookieStorage#set}\n   */\n  it('Cookie values are set', () => {\n    CookieStorage.set('skip_top_bar_ad', 'true', 10);\n    assert.equal(document.cookie, 'skip_top_bar_ad=true');\n    CookieStorage.removeAll();\n\n    CookieStorage.set('last_session_within_one_day', 'yes', 5);\n    assert.equal(document.cookie, 'last_session_within_one_day=yes');\n    CookieStorage.removeAll();\n\n    CookieStorage.set('apply_to_job_opening_id', 5, 'session', { path: '/' });\n    assert.equal(document.cookie, 'apply_to_job_opening_id=5');\n  });\n\n  /**\n   * @test {CookieStorage#remove}\n   */\n  it('Cookies can be removed individually', () => {\n    CookieStorage.set('test', 'value');\n    assert.equal(document.cookie, 'test=value');\n    CookieStorage.remove('test1');\n    assert.equal(document.cookie, 'test=value');\n    CookieStorage.remove('test');\n    assert.equal(document.cookie, '');\n  });\n\n  /**\n   * @test {CookieStorage#removeAll}\n   */\n  it('Cookies can be removed globally', () => {\n    CookieStorage.set('test1', 'value1');\n    CookieStorage.set('test2', 'value2');\n    assert.equal(document.cookie, 'test1=value1; test2=value2');\n    CookieStorage.remove('test-invalid');\n    assert.equal(document.cookie, 'test1=value1; test2=value2');\n    CookieStorage.removeAll();\n    assert.equal(document.cookie, '');\n  });\n});\n"
  },
  {
    "__docId__": 326,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe64",
    "testId": 64,
    "memberof": "test/javascript/test.cookie-storage.js",
    "testDepth": 0,
    "longname": "test/javascript/test.cookie-storage.js~describe64",
    "access": null,
    "description": "CookieStorage",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{CookieStorage}"
      }
    ],
    "testTargets": [
      "CookieStorage"
    ]
  },
  {
    "__docId__": 327,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it65",
    "testId": 65,
    "memberof": "test/javascript/test.cookie-storage.js~describe64",
    "testDepth": 1,
    "longname": "test/javascript/test.cookie-storage.js~describe64.it65",
    "access": null,
    "description": "Cookie values are set",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{CookieStorage#set}"
      }
    ],
    "testTargets": [
      "CookieStorage#set"
    ]
  },
  {
    "__docId__": 328,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it66",
    "testId": 66,
    "memberof": "test/javascript/test.cookie-storage.js~describe64",
    "testDepth": 1,
    "longname": "test/javascript/test.cookie-storage.js~describe64.it66",
    "access": null,
    "description": "Cookies can be removed individually",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{CookieStorage#remove}"
      }
    ],
    "testTargets": [
      "CookieStorage#remove"
    ]
  },
  {
    "__docId__": 329,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it67",
    "testId": 67,
    "memberof": "test/javascript/test.cookie-storage.js~describe64",
    "testDepth": 1,
    "longname": "test/javascript/test.cookie-storage.js~describe64.it67",
    "access": null,
    "description": "Cookies can be removed globally",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{CookieStorage#removeAll}"
      }
    ],
    "testTargets": [
      "CookieStorage#removeAll"
    ]
  },
  {
    "__docId__": 330,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/javascript/test.emit-core-ready-event.js",
    "memberof": null,
    "longname": "test/javascript/test.emit-core-ready-event.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import jsdom from 'mocha-jsdom';\n\n/**\n * @test {EventBus}\n */\ndescribe('emit-core-ready-event', () => {\n  // Initialize the fake DOM that jsdom exposes\n  jsdom();\n\n  /**\n   * @test {EventBus#subscribe}\n   * @test {EventBus#publish}\n   */\n  it('The event is emitted on file inclusion', (done) => {\n    window.addEventListener('jt-core-loaded', () => {\n      done();\n    });\n\n    require('../../src/javascript/emit-core-ready-event');\n  });\n});\n"
  },
  {
    "__docId__": 331,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe68",
    "testId": 68,
    "memberof": "test/javascript/test.emit-core-ready-event.js",
    "testDepth": 0,
    "longname": "test/javascript/test.emit-core-ready-event.js~describe68",
    "access": null,
    "description": "emit-core-ready-event",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{EventBus}"
      }
    ],
    "testTargets": [
      "EventBus"
    ]
  },
  {
    "__docId__": 332,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it69",
    "testId": 69,
    "memberof": "test/javascript/test.emit-core-ready-event.js~describe68",
    "testDepth": 1,
    "longname": "test/javascript/test.emit-core-ready-event.js~describe68.it69",
    "access": null,
    "description": "The event is emitted on file inclusion",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{EventBus#subscribe}"
      },
      {
        "tagName": "@test",
        "tagValue": "{EventBus#publish}"
      }
    ],
    "testTargets": [
      "EventBus#subscribe",
      "EventBus#publish"
    ]
  },
  {
    "__docId__": 333,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/javascript/test.environment.js",
    "memberof": null,
    "longname": "test/javascript/test.environment.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nimport assert from 'assert';\nimport Environment from '../../src/javascript/environment';\n\n/**\n * @test {Environment}\n */\ndescribe('Environment', () => {\n  /**\n   * @test {Environment#isDevelopment}\n   */\n  it('Environment is set to production by default', () => {\n    assert.equal(Environment.isDevelopment(), false);\n    assert.equal(Environment.environment, Environment.PRODUCTION);\n  });\n\n  /**\n   * @test {Environment#set}\n   */\n  it('The environment information can be set', () => {\n    assert.equal(Environment.isDevelopment(), false);\n    Environment.environment = Environment.DEVELOPMENT;\n    assert.equal(Environment.isDevelopment(), true);\n    assert.equal(Environment.environment, Environment.DEVELOPMENT);\n  });\n});\n"
  },
  {
    "__docId__": 334,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe70",
    "testId": 70,
    "memberof": "test/javascript/test.environment.js",
    "testDepth": 0,
    "longname": "test/javascript/test.environment.js~describe70",
    "access": null,
    "description": "Environment",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Environment}"
      }
    ],
    "testTargets": [
      "Environment"
    ]
  },
  {
    "__docId__": 335,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it71",
    "testId": 71,
    "memberof": "test/javascript/test.environment.js~describe70",
    "testDepth": 1,
    "longname": "test/javascript/test.environment.js~describe70.it71",
    "access": null,
    "description": "Environment is set to production by default",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Environment#isDevelopment}"
      }
    ],
    "testTargets": [
      "Environment#isDevelopment"
    ]
  },
  {
    "__docId__": 336,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it72",
    "testId": 72,
    "memberof": "test/javascript/test.environment.js~describe70",
    "testDepth": 1,
    "longname": "test/javascript/test.environment.js~describe70.it72",
    "access": null,
    "description": "The environment information can be set",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Environment#set}"
      }
    ],
    "testTargets": [
      "Environment#set"
    ]
  },
  {
    "__docId__": 337,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/javascript/test.erb-templating.js",
    "memberof": null,
    "longname": "test/javascript/test.erb-templating.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nimport assert from 'assert';\nimport ERBTemplating from '../../src/javascript/erb-templating';\n\n/**\n * @test {ERBTemplating}\n */\ndescribe('ERBTemplating', () => {\n  /**\n   * @test {ERBTemplating#filter}\n   */\n  it('Filter individual strings', () => {\n    assert.equal(ERBTemplating.filter('<%= t(\"cookie_consent.find_out_more\") %>'), 'Find Out More');\n    assert.equal(ERBTemplating.filter('<%= t(\"cookie_consent.cookies_explanation\") %>'),\n      'Cookies Explanation');\n    assert.equal(ERBTemplating.filter(\n      '<%= link_to t(\"cookie_consent.find_out_more\"), cookies_path, target: \"_blank\" %>'),\n      '<a href=\"cookies_path\" target=\"_blank\">Find Out More</a>');\n    assert.equal(ERBTemplating.filter('<%= NO MATCH %>'), 'NO MATCH');\n  });\n\n  /**\n   * @test {ERBTemplating#filter}\n   */\n  it('Filter templates with multiple matches', () => {\n    const template = `<p class=\"landing_cookie_explanation\">\n      <%= t(\"cookie_consent.cookies_explanation\") %>\n      <%= t(\"cookie_consent.cookies_extra\") %>\n      <%= link_to t(\"cookie_consent.find_out_more\"), cookies_path, target: \"_blank\" %>\n    </p>`;\n\n    const expected = `<p class=\"landing_cookie_explanation\">\n      Cookies Explanation\n      Cookies Extra\n      <a href=\"cookies_path\" target=\"_blank\">Find Out More</a>\n    </p>`;\n    assert.equal(ERBTemplating.filter(template), expected);\n  });\n\n  /**\n   * @test {ERBTemplating#_replaceMatches}\n   */\n  it('Replacing placeholders with matches', () => {\n    assert.equal(ERBTemplating._replaceMatches('[1]', ['test']), 'test');\n    assert.equal(\n      ERBTemplating._replaceMatches('<a href=\"[1]\">[2]</a>', ['href', 'text']),\n      '<a href=\"href\">text</a>');\n  });\n});\n"
  },
  {
    "__docId__": 338,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe73",
    "testId": 73,
    "memberof": "test/javascript/test.erb-templating.js",
    "testDepth": 0,
    "longname": "test/javascript/test.erb-templating.js~describe73",
    "access": null,
    "description": "ERBTemplating",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ERBTemplating}"
      }
    ],
    "testTargets": [
      "ERBTemplating"
    ]
  },
  {
    "__docId__": 339,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it74",
    "testId": 74,
    "memberof": "test/javascript/test.erb-templating.js~describe73",
    "testDepth": 1,
    "longname": "test/javascript/test.erb-templating.js~describe73.it74",
    "access": null,
    "description": "Filter individual strings",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ERBTemplating#filter}"
      }
    ],
    "testTargets": [
      "ERBTemplating#filter"
    ]
  },
  {
    "__docId__": 340,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it75",
    "testId": 75,
    "memberof": "test/javascript/test.erb-templating.js~describe73",
    "testDepth": 1,
    "longname": "test/javascript/test.erb-templating.js~describe73.it75",
    "access": null,
    "description": "Filter templates with multiple matches",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ERBTemplating#filter}"
      }
    ],
    "testTargets": [
      "ERBTemplating#filter"
    ]
  },
  {
    "__docId__": 341,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it76",
    "testId": 76,
    "memberof": "test/javascript/test.erb-templating.js~describe73",
    "testDepth": 1,
    "longname": "test/javascript/test.erb-templating.js~describe73.it76",
    "access": null,
    "description": "Replacing placeholders with matches",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ERBTemplating#_replaceMatches}"
      }
    ],
    "testTargets": [
      "ERBTemplating#_replaceMatches"
    ]
  },
  {
    "__docId__": 342,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/javascript/test.event-bus.js",
    "memberof": null,
    "longname": "test/javascript/test.event-bus.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import assert from 'assert';\nimport EventBus from '../../src/coffeescript/event_bus.coffee';\n\n/**\n * @test {EventBus}\n */\ndescribe('EventBus', () => {\n  afterEach(() => {\n    EventBus.clear();\n  });\n\n  /**\n   * @test {EventBus#subscribe}\n   * @test {EventBus#publish}\n   */\n  it('#subscribe listeners can subscribe to events', (done) => {\n    const eventHandler = function(data) {\n      assert.equal(typeof data, 'undefined');\n      done();\n    };\n\n    EventBus.subscribe('testEvent', eventHandler);\n    EventBus.publish('testEvent');\n  });\n\n  /**\n   * @test {EventBus#subscribe}\n   * @test {EventBus#publish}\n   */\n  it('#subscribe listeners receive events data', (done) => {\n    const eventHandler = function(data) {\n      assert.notEqual(typeof data, 'undefined');\n      assert.equal(data.test, 'value');\n      done();\n    };\n\n    EventBus.subscribe('testEvent', eventHandler);\n    EventBus.publish('testEvent', { test: 'value' });\n  });\n});\n"
  },
  {
    "__docId__": 343,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe77",
    "testId": 77,
    "memberof": "test/javascript/test.event-bus.js",
    "testDepth": 0,
    "longname": "test/javascript/test.event-bus.js~describe77",
    "access": null,
    "description": "EventBus",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{EventBus}"
      }
    ],
    "testTargets": [
      "EventBus"
    ]
  },
  {
    "__docId__": 344,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it78",
    "testId": 78,
    "memberof": "test/javascript/test.event-bus.js~describe77",
    "testDepth": 1,
    "longname": "test/javascript/test.event-bus.js~describe77.it78",
    "access": null,
    "description": "#subscribe listeners can subscribe to events",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{EventBus#subscribe}"
      },
      {
        "tagName": "@test",
        "tagValue": "{EventBus#publish}"
      }
    ],
    "testTargets": [
      "EventBus#subscribe",
      "EventBus#publish"
    ]
  },
  {
    "__docId__": 345,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it79",
    "testId": 79,
    "memberof": "test/javascript/test.event-bus.js~describe77",
    "testDepth": 1,
    "longname": "test/javascript/test.event-bus.js~describe77.it79",
    "access": null,
    "description": "#subscribe listeners receive events data",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{EventBus#subscribe}"
      },
      {
        "tagName": "@test",
        "tagValue": "{EventBus#publish}"
      }
    ],
    "testTargets": [
      "EventBus#subscribe",
      "EventBus#publish"
    ]
  },
  {
    "__docId__": 346,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/javascript/test.logger.js",
    "memberof": null,
    "longname": "test/javascript/test.logger.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import assert from 'assert';\nimport Logger from '../../src/coffeescript/logger.coffee';\nimport Spy from '../../src/javascript/test-framework/spy';\n\n/**\n * @test {Logger}\n */\ndescribe('Logger', () => {\n  /**\n   * @type {Logger|null} logger\n   */\n  let logger = null;\n\n  /**\n   * @method beforeEach\n   * @private\n   */\n  beforeEach(() => {\n    if (typeof global.window === 'undefined') {\n      global.window = {};\n    }\n    logger = new Logger();\n  });\n\n  /**\n   * @method afterEach\n   * @private\n   */\n  afterEach(() => {\n    logger = null;\n  });\n\n  /**\n   * @test {Logger#debug}\n   * @test {Logger#info}\n   * @test {Logger#warn}\n   * @test {Logger#error}\n   */\n  it('#debug #info #warn #error trigger console calls', () => {\n    const ref = console;\n    const spy = new Spy();\n    const mock = spy.mock(console);\n\n    const logMethods = ['debug', 'info', 'warn', 'error'];\n    logMethods.map((currentMethod) => {\n      logger[currentMethod]('test');\n    });\n\n    assert.equal(spy.get('log').count, logMethods.length);\n    spy.restore(mock, ref);\n  });\n});\n"
  },
  {
    "__docId__": 347,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe80",
    "testId": 80,
    "memberof": "test/javascript/test.logger.js",
    "testDepth": 0,
    "longname": "test/javascript/test.logger.js~describe80",
    "access": null,
    "description": "Logger",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Logger}"
      }
    ],
    "testTargets": [
      "Logger"
    ]
  },
  {
    "__docId__": 348,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it81",
    "testId": 81,
    "memberof": "test/javascript/test.logger.js~describe80",
    "testDepth": 1,
    "longname": "test/javascript/test.logger.js~describe80.it81",
    "access": null,
    "description": "#debug #info #warn #error trigger console calls",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Logger#debug}"
      },
      {
        "tagName": "@test",
        "tagValue": "{Logger#info}"
      },
      {
        "tagName": "@test",
        "tagValue": "{Logger#warn}"
      },
      {
        "tagName": "@test",
        "tagValue": "{Logger#error}"
      }
    ],
    "testTargets": [
      "Logger#debug",
      "Logger#info",
      "Logger#warn",
      "Logger#error"
    ]
  }
]